[{"title":"Express+Vue+AMP+PWA项目模板使用说明","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/Express-Vue-AMP-PWA%E9%A1%B9%E7%9B%AE%E6%A8%A1%E6%9D%BF%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E.html","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>特点</p>\n<ul>\n<li>解决单页面应用(SPA)的SEO配置问题</li>\n<li>拥有可控的服务端中间件功能，服务端重定向，服务端打cookie等</li>\n<li>可在服务端根据前端需要组装数据供首屏渲染使用</li>\n<li>可方便开发AMP页面，并跟vue打包资源同时发布又区分明确的静态资源</li>\n<li>一键集成PWA功能，附带可用的pwa配置</li>\n<li>方便vue多页面入口配置，及打包资源分析等等<span id=\"more\"></span>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/pwa-link.jpg\"\n                      alt=\"pwa-link\"\n                ><br>包含技术点<br><a class=\"link\"   href=\"https://cli.vuejs.org/guide/installation.html\" >vue-cli3<i class=\"fas fa-external-link-alt\"></i></a>、<a class=\"link\"   href=\"http://expressjs.com/en/guide/routing.html\" >Express<i class=\"fas fa-external-link-alt\"></i></a>、<a class=\"link\"   href=\"https://amp.dev/documentation/guides-and-tutorials/?format=websites\" >AMP<i class=\"fas fa-external-link-alt\"></i></a>、<a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Web/Progressive_web_apps\" >PWA<i class=\"fas fa-external-link-alt\"></i></a>、<a class=\"link\"   href=\"http://nodejs.cn/api/process.html\" >Node.js<i class=\"fas fa-external-link-alt\"></i></a>、<a class=\"link\"   href=\"https://redis.io/\" >Redis<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<p>项目地址<br><a class=\"link\"   href=\"https://github.com/StriverF/express-vue-amp-template\" >StriverF/express-vue-amp-template<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>项目运行效果<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/gifhome_1920x1773_40s.gif\"\n                      alt=\"gifhome_1920x1773_40s\"\n                ></p>\n<h2 id=\"模板项目使用介绍\"><a href=\"#模板项目使用介绍\" class=\"headerlink\" title=\"模板项目使用介绍\"></a>模板项目使用介绍</h2><h3 id=\"项目环境配置\"><a href=\"#项目环境配置\" class=\"headerlink\" title=\"项目环境配置\"></a>项目环境配置</h3><p>下载代码后进入项目目录安装依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h4 id=\"vue环境配置\"><a href=\"#vue环境配置\" class=\"headerlink\" title=\"vue环境配置\"></a>vue环境配置</h4><p>vue环境变量配置，在项目跟目录根据自己需求新增 <code>.env.local</code>文件，参照.env配置自己想要自定义的环境变量。具体vue-cli 环境变量介绍请看<a class=\"link\"   href=\"https://cli.vuejs.org/zh/guide/mode-and-env.html\" >官方文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>新建page入口，在<code>src/pages</code>目录下面新建文件夹，在新增文件夹下面新增 App.vue,index.html,router.js等其他文件即可，<code>vue.config.js</code>里面的pages配置会自动识别新增page目录。<br>具体配置代码如下,vue.config.js详细配置参考<a class=\"link\"   href=\"https://cli.vuejs.org/zh/config/\" >官方文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> pages = &#123;&#125;</span><br><span class=\"line\">glob.sync(<span class=\"string\">&#x27;./src/pages/**/index.js&#x27;</span>).forEach(<span class=\"function\"><span class=\"params\">path</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> chunk = path.split(<span class=\"string\">&#x27;./src/pages/&#x27;</span>)[<span class=\"number\">1</span>].split(<span class=\"string\">&#x27;/index.js&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">  pages[chunk] = &#123;</span><br><span class=\"line\">    entry: path,</span><br><span class=\"line\">    template: <span class=\"string\">&#x27;./src/pages/&#x27;</span> + chunk + <span class=\"string\">&#x27;/index.html&#x27;</span>,</span><br><span class=\"line\">    filename: chunk + <span class=\"string\">&#x27;/index.html&#x27;</span>,</span><br><span class=\"line\">    chunks: [<span class=\"string\">&#x27;chunk-vendors&#x27;</span>, <span class=\"string\">&#x27;chunk-common&#x27;</span>, chunk]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>运行项目执行如下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm run serve</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Node服务端环境配置\"><a href=\"#Node服务端环境配置\" class=\"headerlink\" title=\"Node服务端环境配置\"></a>Node服务端环境配置</h4><p>服务端环境变量配置，在<code>server</code>目录下面新建<code>.env</code>把<code>server/.env.example</code>文件里面的环境变量复制到<code>.env</code>文件，然后根据自己环境需要更改环境变量的值。</p>\n<p>本地https证书安全环境配置，更改<code>.env</code>的<code>SERVER_PROTOCOL</code>的值为<code>https</code>, （本地生成免费安全证书可以用<a class=\"link\"   href=\"https://github.com/FiloSottile/mkcert\" >mkcert<i class=\"fas fa-external-link-alt\"></i></a>, <a class=\"link\"   href=\"https://github.com/FiloSottile/mkcert\" >mkcert<i class=\"fas fa-external-link-alt\"></i></a>是用<a class=\"link\"   href=\"https://golang.org/\" >golang<i class=\"fas fa-external-link-alt\"></i></a>编写的证书生成工具）<br>需要把生成的证书文件.pem文件放入到<code>server/cert</code>目录。<br>配置.env的<code>PRIVATE_KEY_NAME</code>和<code>CERTIFICATE_NAME</code>环境变量值为<code>server/cert</code>目录下的文件名。</p>\n<p>服务端代码Debugger, 我们知道前端代码可以方便的再浏览器的开发者面板中进行断电调试，但是服务端的代码调试不能，因为服务端的代码不在浏览器执行。那么我这里推荐大家使用VSCode来配置Debugger<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/15744042522049.jpg\"\n                     \n                ><br>用VSCode打开项目，操作如上图步骤。会在<code>.vscode</code>目录生成launch.json配置文件，在配置文件配置如下配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 IntelliSense 了解相关属性。 </span></span><br><span class=\"line\">  <span class=\"comment\">// 悬停以查看现有属性的描述。</span></span><br><span class=\"line\">  <span class=\"comment\">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class=\"line\">  <span class=\"string\">&quot;version&quot;</span>: <span class=\"string\">&quot;0.2.0&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;configurations&quot;</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;node&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;request&quot;</span>: <span class=\"string\">&quot;launch&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;启动Node服务&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;runtimeExecutable&quot;</span>: <span class=\"string\">&quot;nodemon&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;cwd&quot;</span>: <span class=\"string\">&quot;$&#123;workspaceFolder&#125;/server&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;program&quot;</span>: <span class=\"string\">&quot;$&#123;workspaceFolder&#125;/server/app.js&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;restart&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;console&quot;</span>: <span class=\"string\">&quot;integratedTerminal&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;internalConsoleOptions&quot;</span>: <span class=\"string\">&quot;neverOpen&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置完就可以按照下图步骤操作，就能启动服务并可以在服务端任意代码行号左侧点击打断点调试。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/15744047509592.jpg\"\n                     \n                ></p>\n<h3 id=\"项目主要的脚本命令\"><a href=\"#项目主要的脚本命令\" class=\"headerlink\" title=\"项目主要的脚本命令\"></a>项目主要的脚本命令</h3><table>\n<thead>\n<tr>\n<th>脚本</th>\n<th>命令</th>\n<th>注意事项</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>运行开发环境</td>\n<td>npm run dev</td>\n<td>只是启动vue的开发环境</td>\n</tr>\n<tr>\n<td>启动服务端环境</td>\n<td>npm run start</td>\n<td>启动node服务端环境</td>\n</tr>\n<tr>\n<td>打包测试环境</td>\n<td>npm run build:test</td>\n<td>打包</td>\n</tr>\n<tr>\n<td>打包预发布环境</td>\n<td>npm run build:alpha</td>\n<td>打包</td>\n</tr>\n<tr>\n<td>打包生产环境</td>\n<td>npm run build:prod</td>\n<td>打包</td>\n</tr>\n</tbody></table>\n<h3 id=\"Express配合Vue-amp-AMP的注意事项\"><a href=\"#Express配合Vue-amp-AMP的注意事项\" class=\"headerlink\" title=\"Express配合Vue&amp;AMP的注意事项\"></a>Express配合Vue&amp;AMP的注意事项</h3><p>AMP的路由 <code>ampRoute.js</code> 使用的<code>ampMiddleware</code>设置了view engine 为ejs的渲染模板</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">req.app.set(<span class=\"string\">&#x27;views&#x27;</span>, <span class=\"string\">&#x27;./amp/views&#x27;</span>)</span><br><span class=\"line\"> req.app.set(<span class=\"string\">&#x27;view engine&#x27;</span>, <span class=\"string\">&#x27;ejs&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>而Vue的路由配置的是自定义渲染模板，根据在Vue打包模板里面配置的模板占位变量来从Node服务端注入相关自定义数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">req.app.engine(<span class=\"string\">&#x27;html&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">filePath, options, callback</span>) </span>&#123;</span><br><span class=\"line\">    fs.readFile(filePath, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, content</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> callback(err)</span><br><span class=\"line\">      <span class=\"keyword\">var</span> rendered = content</span><br><span class=\"line\">        .toString()</span><br><span class=\"line\">        .replace(<span class=\"string\">&#x27;##meta##&#x27;</span>, options.meta)</span><br><span class=\"line\">        .replace(<span class=\"string\">&#x27;##ampLink##&#x27;</span>, options.ampLink || <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">        .replace(<span class=\"string\">&#x27;&quot;##apiJonsContent##&quot;&#x27;</span>, options.apiJonsContent)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> callback(<span class=\"literal\">null</span>, rendered)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  req.app.set(<span class=\"string\">&#x27;views&#x27;</span>, <span class=\"string\">&#x27;./public&#x27;</span>)</span><br><span class=\"line\">  req.app.set(<span class=\"string\">&#x27;view engine&#x27;</span>, <span class=\"string\">&#x27;html&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>注意配置 .env的 redis server （需要安装<a class=\"link\"   href=\"https://redis.io/\" >Redis<i class=\"fas fa-external-link-alt\"></i></a>并启动Redis）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">REDIS_HOST&#x3D;127.0.0.1</span><br><span class=\"line\">REDIS_PORT&#x3D;6379</span><br><span class=\"line\">REDIS_PREFIX&#x3D;website_mobile_alpha</span><br></pre></td></tr></table></figure>\n<p>为了提升性能及减少服务器资源开销，在node服务端请求到数据后，最后根据参数及数据类型利用Redis缓存。正常情况请求一个API需要1000mm左右, 从Redis取数据低于10mm。</p>\n","categories":["开发","前端"],"tags":["vue","ios"]},{"title":"Node.js版本控制切换工具nvm","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/Node-js%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%88%87%E6%8D%A2%E5%B7%A5%E5%85%B7nvm.html","content":"<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/201307241901111966.jpg\"\n                      class=\"img-topic\" /\n                >\n# 前言\nnode版本号更新到最新后，有时候去run一些老项目会报错,大部分原因是node版本过高的原因。这个时候难道又卸载node去装老版本，要run新项目又去装新版本吗？\n不！！！我用nvm工具来灵活切换node版本。\n比如之前装的[Hexo](https://hexo.io/zh-cn/docs/?_blank),在更新node版本到8.13.0后 hexo 所有命令都无效了 报错：command not found: hexo\n这个就是因为node版本过高导致[Hexo](https://hexo.io/zh-cn/docs/?_blank) 命令失效，这个时候我们就可以在Hexo项目文件目录下 \n    `nvm use v7.1.0 `\n<span id=\"more\"></span>\n\n<h1 id=\"安装NVM\"><a href=\"#安装NVM\" class=\"headerlink\" title=\"安装NVM\"></a>安装<a class=\"link\"   href=\"https://github.com/creationix/nvm#install-script?_blank\" >NVM<i class=\"fas fa-external-link-alt\"></i></a></h1><p>可以使用curl安装<br><code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash</code><br>也可以使用Wget安装<br><code>wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash</code></p>\n<p>该脚本克隆NVM存储库<del>/.nvm，并添加源线到您的个人资料（</del>/.bash_profile，<del>/.zshrc，</del>/.profile，或~/.bashrc）。<br><strong>注意</strong>：如果存在环境变量$XDG_CONFIG_HOME，则会将nvm文件放在那里。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">export NVM_DIR &#x3D; “ $ &#123;XDG_CONFIG_HOME &#x2F;： - $ HOME &#x2F;。&#125; nvm ” </span><br><span class=\"line\">[ - s  “ $ NVM_DIR &#x2F;nvm.sh ” ] &amp;&amp;  \\。 “ $ NVM_DIR &#x2F;nvm.sh ”  ＃这将加载NVM</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：您可以添加–no-use到上述脚本（… nvm.sh –no-use）的末尾以推迟使用，nvm直到您手动执行use。</p>\n<p>您可以使用自定义安装源，目录，简介，以及版本NVM_SOURCE，NVM_DIR，PROFILE，和NODE_VERSION变量。例如：curl … | NVM_DIR=”path/to/nvm”。确保NVM_DIR不包含尾部斜杠。</p>\n<h2 id=\"验证安装\"><a href=\"#验证安装\" class=\"headerlink\" title=\"验证安装\"></a>验证安装</h2><p>要验证是否已安装nvm，请执行以下操作：<br><code>command -v nvm</code></p>\n<h3 id=\"重要笔记\"><a href=\"#重要笔记\" class=\"headerlink\" title=\"重要笔记\"></a>重要笔记</h3><p>如果您运行的系统没有预先打包的二进制文件，这意味着您要从其源代码安装nodejs或io.js，则需要确保您的系统具有C ++编译器。对于OS X，Xcode可以工作，对于基于Debian / Ubuntu的GNU / Linux，build-essential和libssl-dev包工作。</p>\n<h1 id=\"使用NVM\"><a href=\"#使用NVM\" class=\"headerlink\" title=\"使用NVM\"></a>使用<a class=\"link\"   href=\"https://github.com/creationix/nvm#usage?_blank\" >NVM<i class=\"fas fa-external-link-alt\"></i></a></h1><h3 id=\"要下载，编译和安装最新版本的node节点，请执行以下操作\"><a href=\"#要下载，编译和安装最新版本的node节点，请执行以下操作\" class=\"headerlink\" title=\"要下载，编译和安装最新版本的node节点，请执行以下操作\"></a>要下载，编译和安装最新版本的node节点，请执行以下操作</h3><p><code>nvm install node</code> # “node” is an alias for the latest version</p>\n<h3 id=\"安装特定版本的节点\"><a href=\"#安装特定版本的节点\" class=\"headerlink\" title=\"安装特定版本的节点\"></a>安装特定版本的节点</h3><p><code>nvm install 6.14.4</code> ＃或10.10.0,8.9.1等</p>\n<h3 id=\"在任何新的shell中只使用已安装的版本\"><a href=\"#在任何新的shell中只使用已安装的版本\" class=\"headerlink\" title=\"在任何新的shell中只使用已安装的版本\"></a>在任何新的shell中只使用已安装的版本</h3><p><code>nvm use node --version</code></p>\n<h3 id=\"切换已安装的node版本号\"><a href=\"#切换已安装的node版本号\" class=\"headerlink\" title=\"切换已安装的node版本号\"></a>切换已安装的node版本号</h3><p><code>nvm use v7.1.1</code></p>\n<h3 id=\"查看本地安装的node版本\"><a href=\"#查看本地安装的node版本\" class=\"headerlink\" title=\"查看本地安装的node版本\"></a>查看本地安装的node版本</h3><p><code>nvm ls</code></p>\n<h3 id=\"查看远端可安装的node版本\"><a href=\"#查看远端可安装的node版本\" class=\"headerlink\" title=\"查看远端可安装的node版本\"></a>查看远端可安装的node版本</h3><p><code>nvm ls-remote</code></p>\n<h3 id=\"要恢复PATH，您可以停用它\"><a href=\"#要恢复PATH，您可以停用它\" class=\"headerlink\" title=\"要恢复PATH，您可以停用它\"></a>要恢复PATH，您可以停用它</h3><p><code>nvm deactivate</code></p>\n<h3 id=\"要设置要在任何新shell中使用的默认节点版本，请使用别名“default”\"><a href=\"#要设置要在任何新shell中使用的默认节点版本，请使用别名“default”\" class=\"headerlink\" title=\"要设置要在任何新shell中使用的默认节点版本，请使用别名“default”\"></a>要设置要在任何新shell中使用的默认节点版本，请使用别名“default”</h3><p><code>nvm alias default node</code></p>\n","categories":["开发","前端"],"tags":["node","nvm"]},{"title":"Express+Vue+AMP+PWA的项目架构","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/Express-Vue-AMP%E6%90%AD%E5%BB%BAnode%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B3%A8%E5%85%A5%E9%A6%96%E5%B1%8F%E6%B8%B2%E6%9F%93%E6%95%B0%E6%8D%AE%E7%9A%84%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Express+Vue+AMP搭建node服务端注入首屏渲染数据, Express+ejs组装<a class=\"link\"   href=\"https://amp.dev/documentation/?format=websites\" >AMP<i class=\"fas fa-external-link-alt\"></i></a>组件的项目架构<br>我做过的某个项目经历过以下5个项目架构形态</p>\n<ol>\n<li>Vue+PHP CI</li>\n<li>Vue+Nginx</li>\n<li>Vue+PHP</li>\n<li>Vue+Express</li>\n<li>Express+Vue+AMP+PWA</li>\n</ol>\n<p>具体架构变动看下面的思维导图</p>\n<span id=\"more\"></span>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84%E8%B0%83%E6%95%B4.png\"\n                      alt=\"网站项目架构调整\"\n                ></p>\n<h2 id=\"最终版项目架构（Express-Vue-AMP-PWA）介绍\"><a href=\"#最终版项目架构（Express-Vue-AMP-PWA）介绍\" class=\"headerlink\" title=\"最终版项目架构（Express+Vue+AMP+PWA）介绍\"></a>最终版项目架构（Express+Vue+AMP+PWA）介绍</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>为什么我把Express放在前面,而不是Vue+AMP+Express? 因为项目架构发展到这里，其实<a class=\"link\"   href=\"http://expressjs.com/\" >Express<i class=\"fas fa-external-link-alt\"></i></a>服务端框架已经占了主体，他可以分发管理部署Vue的静态资源以及AMP页面，以后也还有跟多可扩展性的可能。</p>\n<h3 id=\"Vue多页面应用\"><a href=\"#Vue多页面应用\" class=\"headerlink\" title=\"Vue多页面应用\"></a>Vue多页面应用</h3><p>Vue-Cli3配置多页面入口只需要配置vue.config.js文件里面的<a class=\"link\"   href=\"https://cli.vuejs.org/zh/config/\" >全局CLI配置<i class=\"fas fa-external-link-alt\"></i></a>里面的<a class=\"link\"   href=\"https://cli.vuejs.org/zh/config/#pages\" >pages参数<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>我们项目的多页面经历了多次调整</p>\n<ul>\n<li>第零阶段：最开始担心单页面首屏资源过大，使用了每个页面新建一个page入口，导致VueRouter基本不能用，完全没利用上路由懒加载。</li>\n<li>第一阶段：后面为了方便用<code>&lt;router-link to=&quot;/&quot;&gt;</code>逐渐改为一个单页面应用。</li>\n<li>第二阶段：后面觉得业务功能太多，怕影响单页面首屏加载的资源大小。后面按照业务功能模块分了8个页面入口。</li>\n<li>第三阶段：业务功能间业务关联密切，且交互需求上希望页面跳转加动画且最求更平滑的过渡，那多页面入口就不能较好的支持这些需求，经常遇到需要强制刷新页面切换入口的情况，而且入口匹配错误容易导致404bug。改为按照站点分多页面入口：商城站点入口、App原生及第三方落地页入口、社区站点入口。目前就还是这三个入口，三个入口不会任何的业务性关联，完全独立。这样商城网站的任何单页面交互就可以较好的支持，并且App落地页的入口总资源也相对更小。</li>\n</ul>\n<h3 id=\"Vue-Cli3项目架构\"><a href=\"#Vue-Cli3项目架构\" class=\"headerlink\" title=\"Vue-Cli3项目架构\"></a>Vue-Cli3项目架构</h3><p>最开始我们也是用Vue-cli2，后面发现Vue-cli3项目的结构更清晰合理，配置更简单，并且也可选择深度配置。所有选择从Vue-cli2升级到Vue-cli3，请参考我的另一篇博客<a href=\"https://www.patpat.site/%E5%BC%80%E5%8F%91/Vue-Cli2%E5%88%B0Vue-Cli3-Vue%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84%E5%8D%87%E7%BA%A7/cjzeb0o7900135ifyjg2fpe4u/\">Vue-Cli2到Vue-Cli3 Vue项目架构升级</a><br>Vue-CLI3的几个优势点</p>\n<ol>\n<li>目录结构更清晰.</li>\n<li>弃用之前的的build文件夹的build.js和webpack.prod.conf.js</li>\n<li>使用新的<a class=\"link\"   href=\"https://cli.vuejs.org/zh/config/\" >vue.config.js配置<i class=\"fas fa-external-link-alt\"></i></a>文件包含了之前的wepack配置项。</li>\n<li>支持插件集成和插件开发。（比如<a class=\"link\"   href=\"https://github.com/vuejs/vue-docs-zh-cn/blob/master/vue-cli-plugin-typescript/README.md\" >typeScript<i class=\"fas fa-external-link-alt\"></i></a> 、<a class=\"link\"   href=\"https://github.com/vuejs/vue-docs-zh-cn/blob/master/vue-cli-plugin-unit-mocha/README.md\" >mocha<i class=\"fas fa-external-link-alt\"></i></a>）</li>\n<li>可以通过 vue ui 命令运行图形化界面，在图形化界面上创建和管理项目</li>\n<li><a class=\"link\"   href=\"https://github.com/vuejs/vue-docs-zh-cn/blob/master/vue-cli-plugin-pwa/README.md\" >@vue/cli-plugin-pwa<i class=\"fas fa-external-link-alt\"></i></a>插件方式快速<a class=\"link\"   href=\"https://cli.vuejs.org/zh/config/#pwa\" >配置<i class=\"fas fa-external-link-alt\"></i></a>PWA应用,这样<a class=\"link\"   href=\"https://developers.google.com/web/tools/workbox\" >PWA<i class=\"fas fa-external-link-alt\"></i></a>的功能可以通过插件一键集成</li>\n</ol>\n<h3 id=\"Express-Node服务端路由\"><a href=\"#Express-Node服务端路由\" class=\"headerlink\" title=\"Express Node服务端路由\"></a>Express Node服务端路由</h3><p>为什么需要服务端路由？</p>\n<ol>\n<li>根据不同路由输出不同的预取数据</li>\n<li>不同路由模块使用不同业务中间件</li>\n<li>根据不同路由配置不同Vue多页面入口或AMP资源</li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/15697440334352.jpg\"\n                     \n                ></p>\n<h3 id=\"Express-Node服务端中间件\"><a href=\"#Express-Node服务端中间件\" class=\"headerlink\" title=\"Express Node服务端中间件\"></a>Express Node服务端中间件</h3><p>服务端中间件能做什么？什么是中间件？<br>用2019杭州·云栖大会上的程序员吐槽大会的一段说明就是<br>“我有个同事是做中间件的，我知道中间件很重要，什么是中间件？无非就是有很多人需要找马老师对接业务，马老师很忙没空跟这么多人对接业务，为了考虑马老师繁忙和安全问题，然后就找了水域去跟那些人对接，而马老师就只跟水域对接。说的好听叫中间件，其实就是个太监”。<br>哈哈！！！大家有啥要吐槽的吗？</p>\n<p>举例：例如需要在进入服务端的每个路由之前做出移动端PC端的判断并重定向到对应的环境域名url上，或者是需要在所有路由匹配之前做出广告链接的重定向等业务逻辑。这个时候就需要一个全局的web中间件，在处理在路由匹配之前的业务。</p>\n<h3 id=\"Node服务端动态注入SEO相关数据到Html\"><a href=\"#Node服务端动态注入SEO相关数据到Html\" class=\"headerlink\" title=\"Node服务端动态注入SEO相关\b数据到Html\"></a>Node服务端动态注入SEO相关\b数据到Html</h3><p>大家都知道一个单页面应用的问题，就是不利于SEO搜索引擎的爬虫抓取对应路由页面的内容。因为单页面应用多个路由都是同一个HTML源码，根据前端js路由渲染不同页面内容。所有这个时候要优化ESO其实有多种方案。<br>跟多方案，请参考我之前的博客<a href=\"https://www.patpat.site/%E5%BC%80%E5%8F%91/VueJs%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8SEO%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/cjzeb0o7c001a5ifyu664lfwk/\">VueJs单页面应用SEO解决方案</a><br>目前项目用的是node服务端注入动态SEO相关参数的方案。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/Express+Vue+AMP.png\"\n                      alt=\"Express+Vue+AMP\"\n                ></p>\n<p>可以看到上项目架构思维导图的 Express核心控制器及中间—&gt;Vue打包静态资源的部分, 这个关系里面就是在node服务请求到页面内容数据，并把SEO相关参数通过Ejs或其他html模板语法注入到即将to浏览器的HTML(在Vue打包的.html文件的基础上注入)里面。</p>\n<h3 id=\"Node服务端预取首屏渲染所需业务数据\"><a href=\"#Node服务端预取首屏渲染所需业务数据\" class=\"headerlink\" title=\"Node服务端预取首屏渲染所需业务数据\"></a>Node服务端预取首屏渲染所需业务数据</h3><p>单页面应用一般在主静态框架渲染完需要对不同的页面在浏览器端请求API异步拿到数据后再渲染内容到页面上。这个过程用户看到的体验是会有一个API请求Loading的过程。而且这个过程跟用户的网络情况有直接关系，如果页面首屏需要渲染的数据在服务端返回HTML文档的时候就直接包含在HTML源代码里面了，那前端到浏览器可以省掉请求首屏数据的API，整个速度体验可以提升1秒左右。因为在node服务端请求API拿数据不取决于用户的网络，一般服务的网络情况比较稳定，ndoe服务端还可以对请求的相同数据利用Redis或其他缓存工具进行缓存，这样在服务端请求数据的速度可以从之前的平均1000ms降低到平均10ms以内。</p>\n<h3 id=\"Express架构内增加AMP开发模块\"><a href=\"#Express架构内增加AMP开发模块\" class=\"headerlink\" title=\"Express架构内增加AMP开发模块\"></a>Express架构内增加AMP开发模块</h3><p><a class=\"link\"   href=\"https://amp.dev/documentation/?format=websites\" >AMP<i class=\"fas fa-external-link-alt\"></i></a>是什么?<br><a class=\"link\"   href=\"https://amp.dev/documentation/?format=websites\" >AMP<i class=\"fas fa-external-link-alt\"></i></a>是Google主导的一个开源的网页性能优化组件库，我更多的认为AMP其实是为网站性能优化定制的一套规则，它有很多规则限制，不能自定义js代码，要使用组件必须按照规则来使用，避免制造出影响网页性能的代码。</p>\n<p><a class=\"link\"   href=\"https://amp.dev/documentation/?format=websites\" >AMP<i class=\"fas fa-external-link-alt\"></i></a>为什么要选择<a class=\"link\"   href=\"https://amp.dev/documentation/?format=websites\" >AMP<i class=\"fas fa-external-link-alt\"></i></a>他有什么优势？</p>\n<ol>\n<li><a class=\"link\"   href=\"https://amp.dev/documentation/?format=websites\" >AMP<i class=\"fas fa-external-link-alt\"></i></a>的静态页面会被Google收录并享受免费cdn服务。</li>\n<li><a class=\"link\"   href=\"https://amp.dev/documentation/?format=websites\" >AMP<i class=\"fas fa-external-link-alt\"></i></a>在Google的搜索结果页具有优先展示优势（虽然Google官方说并没特殊优先级，但是实际效果是确实会带来更多优质自然流量）</li>\n<li>在Google搜索结果页提前预加载你的AMP页面，这样在结果页面点击打开你的<a class=\"link\"   href=\"https://amp.dev/documentation/?format=websites\" >AMP<i class=\"fas fa-external-link-alt\"></i></a>页面能有秒开的体验，因为不需要重新加载页面资源。</li>\n<li><a class=\"link\"   href=\"https://amp.dev/documentation/?format=websites\" >AMP<i class=\"fas fa-external-link-alt\"></i></a>网页加载速度更快，性能更稳定。</li>\n</ol>\n<h2 id=\"总结及Demo代码分享\"><a href=\"#总结及Demo代码分享\" class=\"headerlink\" title=\"总结及Demo代码分享\"></a>总结及Demo代码分享</h2><p>前端项目架构并不是越复杂越好，并不是用最前沿的框架就是最好，最合适自己的业务的才是最好的，然后在能支持其现在的业务的基础上，再考虑一下明天的业务扩展，考虑怎么样快速高效的支持”明天的扩展业务”。再进一步就是考虑怎么样能够高效开发维护，并提高网站性能，给用户提供极致的用户体验。</p>\n<p>Express+Vue+AMP架构的模板代码地址：<a class=\"link\"   href=\"https://github.com/StriverF/express-vue-amp-template\" >StriverF/express-vue-amp-template<i class=\"fas fa-external-link-alt\"></i></a></p>\n","categories":["开发","前端"],"tags":["vue","node","express","vue-cli3"]},{"title":"Js Console报错排查及解决方案","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/Js-Console%E6%8A%A5%E9%94%99%E6%8E%92%E6%9F%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0.html","content":"<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/201307241901111966.jpg\"\n                      class=\"img-topic\" /\n                >\n# 前言\n开发过程中有时经常看到一个报错，脑海中浮现出曾经遇到过这样的错误，并也经历过解决方案，但是突然就说想不起来之前是怎么解决的，所以这里记录日常开发中Chrome浏览器Console报错排查及解决方案&思路\n<span id=\"more\"></span>\n\n<h2 id=\"Console报错：Unchecked-runtime-lastError-The-message-port-closed-before-a-response-was-received\"><a href=\"#Console报错：Unchecked-runtime-lastError-The-message-port-closed-before-a-response-was-received\" class=\"headerlink\" title=\"Console报错：Unchecked runtime.lastError: The message port closed before a response was received.\"></a>Console报错：<font color=red>Unchecked runtime.lastError: The message port closed before a response was received.</font></h2><h3 id=\"中文翻译：不受控制的运行时。lastError-消息端口在接收到响应之前关闭。\"><a href=\"#中文翻译：不受控制的运行时。lastError-消息端口在接收到响应之前关闭。\" class=\"headerlink\" title=\"中文翻译：不受控制的运行时。lastError:消息端口在接收到响应之前关闭。\"></a>中文翻译：不受控制的运行时。lastError:消息端口在接收到响应之前关闭。</h3><h3 id=\"原因：this-does-not-look-like-a-Caddy-error-Caddy-errors-would-not-be-rendered-client-side-是一个浏览器扩展问题，或者是由于您的页面上加载了一些JS。这里没有任何东西指向凯蒂的问题。参考链接\"><a href=\"#原因：this-does-not-look-like-a-Caddy-error-Caddy-errors-would-not-be-rendered-client-side-是一个浏览器扩展问题，或者是由于您的页面上加载了一些JS。这里没有任何东西指向凯蒂的问题。参考链接\" class=\"headerlink\" title=\"原因：this does not look like a Caddy error. (Caddy errors would not be rendered client-side.)  是一个浏览器扩展问题，或者是由于您的页面上加载了一些JS。这里没有任何东西指向凯蒂的问题。参考链接\"></a>原因：this does not look like a Caddy error. (Caddy errors would not be rendered client-side.)  是一个浏览器扩展问题，或者是由于您的页面上加载了一些JS。这里没有任何东西指向凯蒂的问题。<a class=\"link\"   href=\"https://stackoverflow.com/questions/43154963/promise-error-the-message-port-closed-before-a-reponse-was-received\" >参考链接<i class=\"fas fa-external-link-alt\"></i></a></h3><p>If that is not solving your issue. You could try disabling all the chrome extensions and check if that solve your issue.<br>To disable you could type the below code in chrome url:<br>chrome://extensions/<br>or could go on<br>Settings &gt; Extensions<br>After that you could enable each extensions and check the culprit.</p>\n<h3 id=\"解决方案：检查你浏览器安装的扩展程序，一个个关闭扩展程序看看是那个扩展程序影响的。\"><a href=\"#解决方案：检查你浏览器安装的扩展程序，一个个关闭扩展程序看看是那个扩展程序影响的。\" class=\"headerlink\" title=\"解决方案：检查你浏览器安装的扩展程序，一个个关闭扩展程序看看是那个扩展程序影响的。\"></a>解决方案：检查你浏览器安装的扩展程序，一个个关闭扩展程序看看是那个扩展程序影响的。</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15506477794913.jpg\"\n                     \n                ></p>\n","categories":["开发","前端"],"tags":["js"]},{"title":"Mac Sublime Text 3 插件管理工具安装-Package Control","url":"/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/Sublime-Text-3-Package%E2%80%94Control.html","content":"<h3 id=\"Sublime-Text这个工具不用多说，所有程序员基本都喜欢用。轻便，且功能强大，快捷。\"><a href=\"#Sublime-Text这个工具不用多说，所有程序员基本都喜欢用。轻便，且功能强大，快捷。\" class=\"headerlink\" title=\"Sublime Text这个工具不用多说，所有程序员基本都喜欢用。轻便，且功能强大，快捷。\"></a>Sublime Text这个工具不用多说，所有程序员基本都喜欢用。轻便，且功能强大，快捷。</h3><p>最近用Sublime text做批量编辑真的很方便。然后更新了最新版本。对于喜欢探索新东西的我，想把所有功能都试个遍，然后看到官方说的Package Control,插件管理工具的使用说明。<br>利用这个Package Control可以给Sublime Text扩展更多的实用功能。<br><em>比如Python code API</em></p>\n<span id=\"more\"></span>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/WechatIMG103.jpeg\"\n                      alt=\"sublime test\"\n                ></p>\n<h2 id=\"1-安装Package-Control\"><a href=\"#1-安装Package-Control\" class=\"headerlink\" title=\"1.安装Package Control\"></a>1.安装Package Control</h2><ul>\n<li>点击屏幕最左上角 Sublime Text &gt; Preferences &gt; Browse Packages 菜单</li>\n<li>浏览文件夹，然后进入Installed Packages/ 文件夹</li>\n<li>下载<a class=\"link\"   href=\"https://packagecontrol.io/Package%20Control.sublime-package\"  title=\"点击下载\">Package Control.sublime-package<i class=\"fas fa-external-link-alt\"></i></a> 并将其复制到Installed Packages /目录中</li>\n<li>重新启动sublime test</li>\n</ul>\n<p><a class=\"link\"   href=\"https://packagecontrol.io/installation#st3\"  title=\"查看官方文档\">官方安装文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"2-使用Package-Control安装插件\"><a href=\"#2-使用Package-Control安装插件\" class=\"headerlink\" title=\"2.使用Package Control安装插件\"></a>2.使用Package Control安装插件</h2><ul>\n<li>快捷键 command+shift+p 打开一个插件工具的功能搜索输入框。</li>\n<li>在输入框输入 Install 找到 Install Package,选择这个功能。</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/WechatIMG102.jpeg\"\n                      alt=\"sublime test\"\n                ></p>\n<ul>\n<li>然后弹出一个搜索插件的搜索框。</li>\n<li>这里搜索会到插件库去搜索插件，要1秒左右的搜索时间。</li>\n<li>输入”Chinese”选择”ChineseLocalizations”，我这里图片上搜索出来的没有”ChineseLocalizations”因为我已经按照过这个插件了。没安装的一般搜索出来第一个就是”ChineseLocalizations”</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/WechatIMG105.jpeg\"\n                      alt=\"sublime test\"\n                ></p>\n<h2 id=\"3-使用安装好的插件（这里安装的是语言包插件）\"><a href=\"#3-使用安装好的插件（这里安装的是语言包插件）\" class=\"headerlink\" title=\"3.使用安装好的插件（这里安装的是语言包插件）\"></a>3.使用安装好的插件（这里安装的是语言包插件）</h2><ul>\n<li>在菜单栏找到 Help &gt; Language &gt;选择你要的语言。</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/WechatIMG104.jpeg\"\n                      alt=\"sublime test\"\n                ></p>\n<h2 id=\"4-Package-Control的其他功能。\"><a href=\"#4-Package-Control的其他功能。\" class=\"headerlink\" title=\"4.Package Control的其他功能。\"></a>4.Package Control的其他功能。</h2><ul>\n<li>它是一个插件管理器，所以它除了安装插件外还有很多功能。</li>\n<li>删除插件 Remove Package、禁用插件：Disable Package …等</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/WechatIMG108.jpeg\"\n                      alt=\"sublime test\"\n                ></p>\n<h2 id=\"5-使用中文后首选项内容查看。\"><a href=\"#5-使用中文后首选项内容查看。\" class=\"headerlink\" title=\"5.使用中文后首选项内容查看。\"></a>5.使用中文后首选项内容查看。</h2><ul>\n<li>这里可以设置很多个性化内容。</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/WechatIMG109.jpeg\"\n                      alt=\"sublime test\"\n                ></p>\n<p>本文主要讲 Sublime Text 3 的 Package Control 插件管理器的使用，用Package Control安装了多语言包插件，实现了 Sublime Text 3 汉化，Sublime Text 3 简体中文，繁体中文，Japanese, English..</p>\n","categories":["开发","后端"],"tags":["Tool","Text"]},{"title":"Ubuntu Nginx 配置https免费SSL证书安全环境","url":"/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/Ubuntu-Nginx-%E9%85%8D%E7%BD%AE%E5%85%8D%E8%B4%B9https-SSL-%E5%AE%89%E5%85%A8%E7%8E%AF%E5%A2%83.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>有时候在某些开发场景必须需要用到https安全环境来测试，比如FB的登录sdk调试，FB的<a class=\"link\"   href=\"https://developers.facebook.com/docs/applinks\" >App Links<i class=\"fas fa-external-link-alt\"></i></a>，<a class=\"link\"   href=\"https://developers.google.com/web/ilt/pwa\" >PWA<i class=\"fas fa-external-link-alt\"></i></a>的调试等等。那我们就需要搭建一个https安全环境,这种情况我有两种解决方案。</p>\n<ol>\n<li>用<a class=\"link\"   href=\"https://github.com/FiloSottile/mkcert\" >mkcert<i class=\"fas fa-external-link-alt\"></i></a>本地生成免费安全证书</li>\n<li>去<a class=\"link\"   href=\"https://s.qiniu.com/ZfumU3\" >七牛云<i class=\"fas fa-external-link-alt\"></i></a>或者阿里云白嫖免费安全证书</li>\n</ol>\n<p>第1种本地生成的证书只能在自己电脑上信任证书来确保https安全环境为绿色，在其他设备上会显示https不安全。<br>要使用公网认证的https就用第2种方式，去白嫖SSL安全证书，第2钟方式要有几个前提条件</p>\n<ul>\n<li>自己拥有ECS云服务器（这个阿里与好像也有能白嫖的低配机器）</li>\n<li>自己拥有一个域名（去阿里云购买非特殊域名也不贵几块钱一年）</li>\n<li>注册七牛云账户去0元购买SSL免费证书</li>\n<li>还有就是你需要基本熟悉Linux操作命令</li>\n</ul>\n<p>我下面主要介绍第2种方案，想要实现第1种方案的可以去查看<a class=\"link\"   href=\"https://github.com/FiloSottile/mkcert\" >mkcert<i class=\"fas fa-external-link-alt\"></i></a>的文档</p>\n<span id=\"more\"></span>\n\n<h1 id=\"七牛云购买免费证书\"><a href=\"#七牛云购买免费证书\" class=\"headerlink\" title=\"七牛云购买免费证书\"></a>七牛云购买免费证书</h1><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16137146697268.jpg\"\n                      alt=\"购买免费证书\"\n                ></p>\n<p>没有七牛云的朋友我推荐大家去注册一下，特别接地气的云服务商。<br><a class=\"link\"   href=\"https://s.qiniu.com/ZfumU3\" >https://s.qiniu.com/ZfumU3<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"登录注册七牛云购买免费SSL证书\"><a href=\"#登录注册七牛云购买免费SSL证书\" class=\"headerlink\" title=\"登录注册七牛云购买免费SSL证书\"></a>登录注册七牛云购买免费SSL证书</h2><p>注册登录后点击左上角菜单栏 &gt; SSL证书 &gt; 购买证书 &gt; 选择证书品牌（TrustAsia）&gt; DV域名型</p>\n<h2 id=\"购买成功后补全信息\"><a href=\"#购买成功后补全信息\" class=\"headerlink\" title=\"购买成功后补全信息\"></a>购买成功后补全信息</h2><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16137158019193.jpg\"\n                      alt=\"补全信息\"\n                ></p>\n<h2 id=\"DNS验证域名\"><a href=\"#DNS验证域名\" class=\"headerlink\" title=\"DNS验证域名\"></a>DNS验证域名</h2><p>因为不能随便填别人的域名添加SSL证书配置，所以需要验证域名所有权确认域名是你的。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16137168050786.jpg\"\n                      alt=\"DNS验证域名\"\n                ></p>\n<p>按照SSL订单详情给的TXT记录值，去添加TXT域名解析用来验证域名所有权<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16137174974979.jpg\"\n                      alt=\"DNS验证域名\"\n                ></p>\n<p>在阿里云控制台域名解析添加完TXT记录值，再回来七牛云的SSL订单详情页 点击检测验证结果，一般1分钟都不要就通过了。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16137176683041.jpg\"\n                      alt=\"DNS验证域名\"\n                ></p>\n<h1 id=\"下载证书并导入阿里云ECS服务器\"><a href=\"#下载证书并导入阿里云ECS服务器\" class=\"headerlink\" title=\"下载证书并导入阿里云ECS服务器\"></a>下载证书并导入阿里云ECS服务器</h1><p>在七牛云SSL证书服务/证书管理列表 下载刚刚验证完的证书文件。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16137178060785.jpg\"\n                      alt=\"下载证书\"\n                ></p>\n<h2 id=\"使用scp命令把证书文件上传到ECS服务器\"><a href=\"#使用scp命令把证书文件上传到ECS服务器\" class=\"headerlink\" title=\"使用scp命令把证书文件上传到ECS服务器\"></a>使用scp命令把证书文件上传到ECS服务器</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">scp ~user/ssl/xxx.com.zip root@<span class=\"number\">47.244</span><span class=\"number\">.10</span><span class=\"number\">.110</span>:<span class=\"regexp\">/usr/</span>local/cert</span><br><span class=\"line\">scp 要上传的文件名 ECS主机用户@ECS主机公网ip:要上传到ECS主机的目录</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"新增Nginx配置\"><a href=\"#新增Nginx配置\" class=\"headerlink\" title=\"新增Nginx配置\"></a>新增Nginx配置</h1><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen <span class=\"number\">80</span>;</span><br><span class=\"line\">    server_name app.patpat.link;</span><br><span class=\"line\">\t # 80端口重定向到 https 443</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">301</span> https:<span class=\"comment\">//$server_name$request_uri;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    server_name  app.patpat.link;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_log             /<span class=\"keyword\">var</span>/log/nginx/app_link_error.log;</span><br><span class=\"line\">    access_log            /<span class=\"keyword\">var</span>/log/nginx/app_link_access.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    # ssl验证相关配置</span><br><span class=\"line\">    ssl on;</span><br><span class=\"line\">    ssl_certificate /usr/local/cert/app.patpat.link.crt; # 证书路径配置</span><br><span class=\"line\">    ssl_certificate_key /usr/local/cert/app.patpat.link.key; # 证书key路径配置</span><br><span class=\"line\">    </span><br><span class=\"line\">    #ssl_session_timeout  5m;    #缓存有效期</span><br><span class=\"line\">    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2; #安全链接可选的加密协议</span><br><span class=\"line\">    ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP; #加密算法</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\">    root /var/www/app-link/dist; # 网站根目录配置</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        #vue router configure</span><br><span class=\"line\">        try_files $uri $uri/ /index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置阿里云ECS安全组端口443规则\"><a href=\"#配置阿里云ECS安全组端口443规则\" class=\"headerlink\" title=\"配置阿里云ECS安全组端口443规则\"></a>配置阿里云ECS安全组端口443规则</h1><p>上面的配置往访问域名你会发现http能正常重定向到https了，但是到了https的请求，请求一直没响应。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16137187528909.jpg\"\n                      alt=\"请求一直没响应\"\n                ></p>\n<p>然后用curl命令访问发现报错 port 443: Connection timed out<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16137187737030.jpg\"\n                      alt=\"curl命令访问发现报错\"\n                ></p>\n<p>这个时候就是最后一步配置了。ECS云服务器安全组端口规则配置，可参考下面这篇文章。<br><a class=\"link\"   href=\"https://blog.csdn.net/Alen_xiaoxin/article/details/104853828\" >https://blog.csdn.net/Alen_xiaoxin/article/details/104853828<i class=\"fas fa-external-link-alt\"></i></a><br>阿里云ECS允许公网通过HTTP、HTTPS等服务访问实例如何配置？<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16137188659798.jpg\"\n                      alt=\"ECS允许443\"\n                ></p>\n<p>阿里云ECS安全组规则入口：云服务器 ECS  &gt;  网络云安全 &gt; 安全组 &gt; 创建安全组 或者 在现有安全组配置规则 配置入方向</p>\n<p>添加安全组规则<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16137191499796.jpg\"\n                      alt=\"ECS允许443\"\n                ></p>\n<p>OK 现在去访问你的域名就是绿色的https安全环境了，可以愉快的开发调试了。</p>\n","categories":["开发","后端"],"tags":["nginx","ssl","ECS"]},{"title":"Vue CLI3 仿ios NavigationBar & TabBar布局","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/Vue-CLI3-%E4%BB%BFios-NavigationBar-TabBar%E5%B8%83%E5%B1%80.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>一个仿ios App的NavigationBar和TabBar布局,加自动轮播Banner。<br><strong>环境</strong></p>\n<ul>\n<li>node 8.13</li>\n<li>vue 2.6.9</li>\n<li>vue-cli3</li>\n<li>mac os 10.14.2</li>\n</ul>\n<p><strong>js依赖</strong></p>\n<ul>\n<li><a class=\"link\"   href=\"https://github.com/surmon-china/vue-awesome-swiper\" >vue-awesome-swiper<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.html.cn/doc/less/\" >less-loader<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<p><strong>主要实现组件</strong></p>\n<ul>\n<li>NavigationBar.vue</li>\n<li>TabBar.vue</li>\n<li>Swiper.vue</li>\n</ul>\n<span id=\"more\"></span>\n\n<h1 id=\"页面交互效果\"><a href=\"#页面交互效果\" class=\"headerlink\" title=\"页面交互效果\"></a>页面交互效果</h1><p>先看gif效果图，觉得可以在去下面👇找源码。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/1553170556165.gif\"\n                      width = \"400\" alt=\"图片名称\" align=center /\n                ></p>\n<p>生成的gif图不是很清晰，如果觉得有用，源码在这里。<br><a class=\"link\"   href=\"https://github.com/StriverF/vue-cli3-tabbar-navigationbar-layout\" >vue-cli3 仿ios TabBar NavigationBar GitHub源码<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h1 id=\"代码使用\"><a href=\"#代码使用\" class=\"headerlink\" title=\"代码使用\"></a>代码使用</h1><p><strong>TabBar.vue</strong><br>在App.vue引用组件的地方传入tabBarList数组<br>vue data定义<strong>tabBarList</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      navBarOptions: &#123;&#125;,</span><br><span class=\"line\">      tabBarList: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          text: <span class=\"string\">&#x27;好运&#x27;</span>,</span><br><span class=\"line\">          path: <span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\">          normalImg: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./assets/images/tabbar/icon-good-luck-normal.png&#x27;</span>),</span><br><span class=\"line\">          activeImg: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./assets/images/tabbar/icon-good-luck-active.png&#x27;</span>)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          text: <span class=\"string\">&#x27;码报&#x27;</span>,</span><br><span class=\"line\">          path: <span class=\"string\">&#x27;/code-news&#x27;</span>,</span><br><span class=\"line\">          normalImg: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./assets/images/tabbar/icon-code-news-normal.png&#x27;</span>),</span><br><span class=\"line\">          activeImg: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./assets/images/tabbar/icon-code-news-active.png&#x27;</span>)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          text: <span class=\"string\">&#x27;发现&#x27;</span>,</span><br><span class=\"line\">          path: <span class=\"string\">&#x27;/found&#x27;</span>,</span><br><span class=\"line\">          normalImg: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./assets/images/tabbar/icon-found-normal.png&#x27;</span>),</span><br><span class=\"line\">          activeImg: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./assets/images/tabbar/icon-found-active.png&#x27;</span>)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          text: <span class=\"string\">&#x27;我的&#x27;</span>,</span><br><span class=\"line\">          path: <span class=\"string\">&#x27;/mine&#x27;</span>,</span><br><span class=\"line\">          normalImg: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./assets/images/tabbar/icon-mine-normal.png&#x27;</span>),</span><br><span class=\"line\">          activeImg: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./assets/images/tabbar/icon-mine-active.png&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在引用组件时传入<strong>tabBarList</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tab-bar</span> <span class=\"attr\">:tabBarList</span>=<span class=\"string\">&quot;tabBarList&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tab-bar</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>NavigationBar.vue</strong><br>在各个页面上调取this.$emit(‘contentViewChang’, {})</p>\n<p>传入导航栏上需要的数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.$emit(<span class=\"string\">&#x27;contentViewChang&#x27;</span>, &#123;</span><br><span class=\"line\">      navBarOptions: &#123;</span><br><span class=\"line\">        title: <span class=\"string\">&#x27;好运&#x27;</span>,</span><br><span class=\"line\">        subTitle: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        leftItem: &#123;</span><br><span class=\"line\">          icon: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../assets/images/navbar/icon-download-app.png&#x27;</span>),</span><br><span class=\"line\">          text: <span class=\"string\">&#x27;App&#x27;</span>,</span><br><span class=\"line\">          path: <span class=\"string\">&#x27;/download-app&#x27;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        rightItem: &#123;</span><br><span class=\"line\">          icon: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../assets/images/navbar/icon-hple-center.png&#x27;</span>),</span><br><span class=\"line\">          text: <span class=\"string\">&#x27;帮助&#x27;</span>,</span><br><span class=\"line\">          path: <span class=\"string\">&#x27;/hple&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>经过 $emit 会把数据传入到App.vue在由App.vue把数据set给NavigationBar.vue的options根据各个页面回传的数据来决定渲染的Tiele和左右操作按钮。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">navigation-bar</span> <span class=\"attr\">:options</span>=<span class=\"string\">&quot;navBarOptions&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">navigation-bar</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","categories":["开发","前端"],"tags":["Vue","Layout","TabBar","NavigationBar","swiper"]},{"title":"Vue-Cli2到Vue-Cli3 Vue项目架构升级","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/Vue-Cli2%E5%88%B0Vue-Cli3-Vue%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84%E5%8D%87%E7%BA%A7.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>由于<a class=\"link\"   href=\"https://github.com/vuejs/vue-cli/tree/v2#vue-cli--\" >Vue-cli2<i class=\"fas fa-external-link-alt\"></i></a>老板官方不维护，且不推荐使用<a class=\"link\"   href=\"https://github.com/vuejs/vue-cli/tree/v2#vue-cli--\" >Vue-Cli2<i class=\"fas fa-external-link-alt\"></i></a>版本，推荐大家使用<a class=\"link\"   href=\"https://cli.vuejs.org/zh/guide/installation.html\" >Vue-Cli3<i class=\"fas fa-external-link-alt\"></i></a>版本。然后我看了一下Vue-Cli3的文档，确实比之前的老版本体验好了很多。</p>\n<ol>\n<li>目录结构更清晰.</li>\n<li>弃用之前的的build文件夹的build.js和webpack.prod.conf.js</li>\n<li>使用新的<a class=\"link\"   href=\"https://cli.vuejs.org/zh/config/\" >vue.config.js<i class=\"fas fa-external-link-alt\"></i></a>配置文件包含了之前的wepack配置项。</li>\n<li>支持插件集成和插件开发。（比如PWA这样的功能可以通过插件一键集成）</li>\n<li>可以通过 vue ui 命令运行图形化界面，在图形化界面上创建和管理项目<span id=\"more\"></span></li>\n</ol>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><h2 id=\"安装-Vue-CLI\"><a href=\"#安装-Vue-CLI\" class=\"headerlink\" title=\"安装 Vue CLI\"></a>安装 Vue CLI</h2><p>Node 版本要求<br>Vue CLI 需要 Node.js 8.9 或更高版本 (推荐 8.11.0+)。你可以使用 <a href=\"https://www.patpat.site/%E5%BC%80%E5%8F%91/Node-js%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%88%87%E6%8D%A2%E5%B7%A5%E5%85%B7nvm/cjtjovlc2000tbq04bgnl1vl3/\">nvm</a> 或 nvm-windows 在同一台电脑中管理多个 Node 版本。</p>\n<p>可以使用下列任一命令安装这个新的包：</p>\n<pre><code>npm install -g @vue/cli\n# OR\nyarn global add @vue/cli\n</code></pre>\n<p>用这个命令来检查其版本是否正确 (3.x)：</p>\n<pre><code>vue --version\n</code></pre>\n<h2 id=\"创建Vue-CLI3版本的新项目\"><a href=\"#创建Vue-CLI3版本的新项目\" class=\"headerlink\" title=\"创建Vue CLI3版本的新项目\"></a>创建Vue CLI3版本的新项目</h2><p>创建项目可以用vue命令也可以用vue图形化界面<br>运行以下命令来创建一个新项目：</p>\n<pre><code>vue create hello-world\n</code></pre>\n<p>我下面介绍是使用图形界面创建项目：<br>执行以下名运行图形化界面</p>\n<pre><code>vue ui\n</code></pre>\n<p>执行完浏览器会自动打开一个<a class=\"link\"   href=\"http://localhost:8000/dashboard%E7%9A%84%E7%BD%91%E9%A1%B5%E3%80%82%E5%85%B6%E5%AE%9E%E5%B0%B1%E6%98%AF%E4%B8%80%E4%B8%AA%E6%9C%ACnode%E7%8E%AF%E5%A2%83%E8%BF%90%E8%A1%8C%E7%9A%84%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E3%80%82\" >http://localhost:8000/dashboard的网页。其实就是一个本node环境运行的一个项目。<i class=\"fas fa-external-link-alt\"></i></a><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15590279512386.jpg\"\n                     \n                ></p>\n<p>在Vue项目管理器的界面可以查看项目列表，创建项目，导入已有的项目。</p>\n<p>选择目录创建项目<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15590280578702.jpg\"\n                     \n                ></p>\n<p>取项目名字和选包管理器。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15590281262570.jpg\"\n                     \n                ></p>\n<p>选择项目需要的配置或现在已经保存的预设配置<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15590283159001.jpg\"\n                     \n                ></p>\n<p>创建项目中，这个过程中会装好npm依赖库<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15590283445727.jpg\"\n                     \n                ></p>\n<p>当前项目配置，及依赖选装<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15590286439291.jpg\"\n                     \n                ></p>\n<h2 id=\"迁移老项目的src目录组件到新项目\"><a href=\"#迁移老项目的src目录组件到新项目\" class=\"headerlink\" title=\"迁移老项目的src目录组件到新项目\"></a>迁移老项目的src目录组件到新项目</h2><ol>\n<li>直接把老项目的src目录复制到新项目，把新项目的src改一个名字例如src_bk 备份放这里以便过程中参考。</li>\n<li>把老项目的static目录复制到新项目的public目录。</li>\n<li>在新项目运行 npm run build, 这个时候肯定会报错，会提示你需要安装src里面用到的依赖，直接复制报错提示 需要运行的命 类似下图<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15590289868578.jpg\"\n                     \n                ></li>\n<li>配置项目环境变量Vue Cli3环境变量参考<a class=\"link\"   href=\"https://cli.vuejs.org/zh/guide/mode-and-env.html#%E6%A8%A1%E5%BC%8F\" >官方文档<i class=\"fas fa-external-link-alt\"></i></a> 在项目根目录创建各个环境的.env配置。如下图<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15590291883313.jpg\"\n                     \n                ></li>\n<li>再就是src目录下老老代码可能会有运行时编译的报错, 可以配置vue.conifg.js的<a class=\"link\"   href=\"https://cli.vuejs.org/zh/config/#runtimecompiler\" >runtimeCompiler<i class=\"fas fa-external-link-alt\"></i></a>配置为true,但是这样会让应用额外增加 10kb 。所以我是吧老项目有用到运行时编译的组件都改掉，让其打包时编译。</li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15590301297524.jpg\"\n                     \n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15590302939199.jpg\"\n                     \n                ></p>\n<h2 id=\"本地运行项目\"><a href=\"#本地运行项目\" class=\"headerlink\" title=\"本地运行项目\"></a>本地运行项目</h2><pre><code>npm run serve\n</code></pre>\n<p>如果有报错再根据错误提示修复问题。我这边目前没遇到什么大的问题。项目迁移完后一切正常。并且打包的文件比老项目架构大小少了大概30%。</p>\n","categories":["开发","前端"],"tags":["vue","js","css","vue-cli3"]},{"title":"Vue-Cli3、multi-page多页面、i18n多语言项目打包优化","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/Vue-Cli3%E3%80%81multi-page%E5%A4%9A%E9%A1%B5%E9%9D%A2%E3%80%81i18n%E5%A4%9A%E8%AF%AD%E8%A8%80%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这次主要是对打包文件 chunk-vendors文件拆包，和 chunk-common提取通用chunk 里面的多语言包进行分语言环境懒加载。<br>要做这这些事情，需要先了解以下内容：</p>\n<ul>\n<li>Webpack打包分析工具 <a class=\"link\"   href=\"https://github.com/webpack-contrib/webpack-bundle-analyzer\" >webpack-bundle-analyzer<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://kazupon.github.io/vue-i18n/zh/guide/lazy-loading.html\" >Vue i18n<i class=\"fas fa-external-link-alt\"></i></a> 延迟加载翻译包</li>\n<li>Webpack<a class=\"link\"   href=\"https://webpack.js.org/plugins/split-chunks-plugin/\" >splitChunks<i class=\"fas fa-external-link-alt\"></i></a> 根据主要常用的npm库拆分</li>\n<li>Vue-cli3<a class=\"link\"   href=\"https://cli.vuejs.org/zh/config/#pages\" >多页面<i class=\"fas fa-external-link-alt\"></i></a>入口配置</li>\n<li>Webpack<a class=\"link\"   href=\"https://webpack.js.org/plugins/dll-plugin/#dllplugin\" >dllPlugin<i class=\"fas fa-external-link-alt\"></i></a>预构建配置 </li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"i18n多语言包拆分\"><a href=\"#i18n多语言包拆分\" class=\"headerlink\" title=\"i18n多语言包拆分\"></a>i18n多语言包拆分</h2><h3 id=\"1-优化效果对比\"><a href=\"#1-优化效果对比\" class=\"headerlink\" title=\"1.优化效果对比\"></a>1.优化效果对比</h3><p>首先看一下优化前后的<a class=\"link\"   href=\"https://github.com/webpack-contrib/webpack-bundle-analyzer\" >webpack-bundle-analyzer<i class=\"fas fa-external-link-alt\"></i></a>的分析截图<br><strong>优化前</strong><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15611061213051.jpg\"\n                     \n                ><br>从上图可以看到chunk-common.xxx.js 和chunk-vendors.xxx.js文件都特别大。700kb以上。<br>然而chunk-common.xxx.js文件大小主要被lang多语言包占了90%以上，然而网站加载显示的时候其实一次性加载所有语言包是没必要的。<br>下面看我们对多语言包进行拆分后的打包分析截图。<br><strong>多语言拆包优化后</strong><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15611064529088.jpg\"\n                     \n                ><br>从优化后的截图看到vendors.xxx.js文件还是很大（后面我们再细讲vendors.xxx.js文件拆包优化）。再看chunk-common.xxx.js文件大小以及是160kb，这个时候它里面已经没有多语言包了。只有提取的通用代码，不过这通用代码其实我们还可以优化，让它变的更小。再看有多个多语言包的js都是按照语言分包的js。比如ar zh都是单独的语言包。在对应语言环境的时候只需要加载一种语言包就好了。拆分后的语言包js每个都小于200kb，这个状态下还有很大优化空间，我们的语言包还可以分页面以及优化语言包的key命名来减少大小。</p>\n<h3 id=\"2-多语言拆包实施\"><a href=\"#2-多语言拆包实施\" class=\"headerlink\" title=\"2.多语言拆包实施\"></a>2.多语言拆包实施</h3><p>我们优化前使用vue i18n的方式都是直接 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.use(VueI18n)</span><br><span class=\"line\"><span class=\"keyword\">const</span> i18n = <span class=\"keyword\">new</span> VueI18n(&#123;</span><br><span class=\"line\">  locale: store.getters.currentLang,</span><br><span class=\"line\">  messages: &#123;</span><br><span class=\"line\">    ar: &#123;...&#125;,</span><br><span class=\"line\">    zh: &#123;...&#125;,</span><br><span class=\"line\">    en: &#123;...&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这样虽然单页面切换语言可以不强制刷新页面就直接切换语言，但是带来的后果是打包资源大量被语言包占用。</p>\n<p>所以我们看看vue-i18n的<a class=\"link\"   href=\"https://kazupon.github.io/vue-i18n/zh/guide/lazy-loading.html\" >延迟加载翻译<i class=\"fas fa-external-link-alt\"></i></a>的文档</p>\n<p>可以看到，文档最前面就说到：一次加载所有翻译文件是过度和不必要的。使用 Webpack 时，延迟加载或异步加载转换文件非常简单。<br>这就是我们想要的！<br>按照文档搞完后，调整了语言包的结构，通过在router.beforeEach里面来懒加载要切换的语言包，这样不仅语言包打包被拆分。单页面切换语言也可以达到不强制刷新页面的体验。（如果你们网站的路由里面就有多语言参数那就更好处理了）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> lang = to.params.lang</span><br><span class=\"line\">  loadLanguageAsync(lang).then(<span class=\"function\">() =&gt;</span> next())</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>我们可以通过检查 lang 是否实际上是否支持来改进这一点，调用 reject 这样我们就可以在 beforeEach 捕获路由转换。</p>\n<h2 id=\"弃用占用资源超大并使用价值不打的依赖库\"><a href=\"#弃用占用资源超大并使用价值不打的依赖库\" class=\"headerlink\" title=\"弃用占用资源超大并使用价值不打的依赖库\"></a>弃用占用资源超大并使用价值不打的依赖库</h2><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/15635179016664.jpg\"\n                     \n                ><br>以我们项目为例，从打包分析图看出我们的chunk-vendors.xxx.js目前占用767kb。算是单文件比较大的了，如果用户网速比较慢加载大概需要2秒左右。</p>\n<p>我们在看看分析图chunk-vendors.xxx.js里面主要被moment和swiper.js所占据。<br>去看了项目里面对moment依赖库的使用，主要是用来做时间格式显示的转换。这个小功能完全不用这样的一个依赖库。在看moment里面主要是被多语言资源给占据，因为这个依赖库主要为了适配各个地区国家的时间显示格式。所有决定把moment这个依赖库uninstall。</p>\n<p>去看了一下vue-i18n(多语言国际化依赖库)的文档发现我们用的多语言库就可以帮我们实现时间格式化 <a class=\"link\"   href=\"https://kazupon.github.io/vue-i18n/zh/guide/datetime.html\" >Vue I18n 日期时间本地化<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>然后我们就进行了代码替换，使用 vue-i18n 的 $d(Date, ‘YMD’)<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/15635195412784.jpg\"\n                     \n                ></p>\n<p>然后uninstall moment依赖库后的打包分析图，chunk-vendors.xxx.js减少到502KB<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/15635274050674.jpg\"\n                     \n                ></p>\n<h2 id=\"依赖库拆包减少vendors-xxx-js文件大小\"><a href=\"#依赖库拆包减少vendors-xxx-js文件大小\" class=\"headerlink\" title=\"依赖库拆包减少vendors.xxx.js文件大小\"></a>依赖库拆包减少vendors.xxx.js文件大小</h2><p>从上面看的我们 chunk-vendors.xxx.js 虽然moment依赖弃用后，在chunk-vendors.xxx.js 中Swiper.js就浮现，目前swiper.js是占了大头，所以枪打出头鸟，我们现在就来想办法把Swiper.js进行拆包出来。<br>修改vue.config.js的configureWebpack配置，配置splitChunks</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    configureWebpack: &#123;</span><br><span class=\"line\">        optimization: &#123;</span><br><span class=\"line\">            splitChunks: &#123;</span><br><span class=\"line\">                cacheGroups: &#123;</span><br><span class=\"line\">                    common: &#123;</span><br><span class=\"line\">                        name: <span class=\"string\">&#x27;chunk-common&#x27;</span>,</span><br><span class=\"line\">                        minChunks: <span class=\"number\">2</span>,</span><br><span class=\"line\">                        priority: -<span class=\"number\">20</span>,</span><br><span class=\"line\">                        chunks: <span class=\"string\">&#x27;initial&#x27;</span>,</span><br><span class=\"line\">                        reuseExistingChunk: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                        enforce: <span class=\"literal\">true</span> <span class=\"comment\">// 加chunk-common的复写配置，主要是设置强制，因为发现加了下面的chunk-swiper，chunk-common就不生成了。资源会被合并到入口页面的js里面。可能是splitChunks有啥机制判断适当情况才生成chunk-common。</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    swiper: &#123;</span><br><span class=\"line\">                        name: <span class=\"string\">&#x27;chunk-swiper&#x27;</span>,</span><br><span class=\"line\">                        test: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]swiper[\\\\/]/</span>,</span><br><span class=\"line\">                        chunks: <span class=\"string\">&#x27;initial&#x27;</span>,</span><br><span class=\"line\">                        priority: <span class=\"number\">1</span>,</span><br><span class=\"line\">                        reuseExistingChunk: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                        enforce: <span class=\"literal\">true</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在vue.config.js 的<a class=\"link\"   href=\"https://cli.vuejs.org/zh/config/#pages\" >pages配置<i class=\"fas fa-external-link-alt\"></i></a><br>的chunks属性加上’chunk-swiper’的引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pages:[&#123;</span><br><span class=\"line\">    entry: path,</span><br><span class=\"line\">    template: &#39;.&#x2F;src&#x2F;public&#x2F;index.html&#39;,</span><br><span class=\"line\">    filename: &#39;index.html&#39;,</span><br><span class=\"line\">    &#x2F;&#x2F;   title: &#39;title&#39;,</span><br><span class=\"line\">    chunks: [&#39;chunk-vendors&#39;, &#39;chunk-common&#39;, &#39;chunk-swiper&#39;, index]</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n<p>然后再执行打包，看的打包分析图，vendors.xxx.js减少到375KB🤩</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/15635304045741.jpg\"\n                     \n                ></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>优化打包的方法有很多种，选择适合自己的就好了。<br>比如还可以把vue相关的js<a class=\"link\"   href=\"https://juejin.im/post/5c3c544c6fb9a049d37f5903#heading-13\" >用cdn减少文件打包体积等<i class=\"fas fa-external-link-alt\"></i></a>。<br>利用Webpack dllPlugin提示打包热编译速度，减少打包文件大小。<br>只要你想去做，意愿够强，看似很难完成的事情其实有千万中方式可以解决。</p>\n","categories":["开发","前端"],"tags":["vue","js","vue-cli3","webpack","i18n"]},{"title":"Vue SSR服务端渲染-SRR指南构建","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/Vue-SSR%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93-SRR%E6%8C%87%E5%8D%97%E6%9E%84%E5%BB%BA.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>前段时间对网站项目进行了大的架构重构，上线已经半年了。一直想分享Vue-SSR项目架构，但是一直在忙SSR网站的架构优化迭代。<br>首先说一下做SSR项目重构的项目目的是什么</p>\n<ol>\n<li>更全面的SEO优化</li>\n<li>网站首屏渲染性能优化</li>\n<li>项目可维护性优化</li>\n<li>项目高可用性优化</li>\n</ol>\n<h2 id=\"技术选型\"><a href=\"#技术选型\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h2><p>我们这次选用的是Vue SSR指南自定义搭建Vue-SSR项目架构, 为啥不选用Vue开箱即用的SSR框架Nuxt?</p>\n<ol>\n<li>我们需要更多设置和选择的余地，Nuxt是更高级别的抽象，它为开发者做出了很多选择</li>\n<li>我们想更深度的了解SSR的工作原理</li>\n<li>Nuxt根据目录生成动态路由，让人感觉有点不自由（虽然有约束不一定是负面的）</li>\n</ol>\n<span id=\"more\"></span>\n\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><h2 id=\"需要熟悉的技术栈\"><a href=\"#需要熟悉的技术栈\" class=\"headerlink\" title=\"需要熟悉的技术栈\"></a>需要熟悉的技术栈</h2><ul>\n<li>Node.js</li>\n<li>Vue</li>\n<li>Webpack</li>\n<li>Nginx</li>\n<li>Redis</li>\n<li>CF动态CDN</li>\n</ul>\n<h2 id=\"事先阅读一遍相关文档\"><a href=\"#事先阅读一遍相关文档\" class=\"headerlink\" title=\"事先阅读一遍相关文档\"></a>事先阅读一遍相关文档</h2><ul>\n<li><a class=\"link\"   href=\"https://ssr.vuejs.org/zh/\" >Vue SSR指南<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"http://expressjs.com/en/guide/routing.html\" >Node.js框架Express<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://nuxtjs.org/docs/2.x/get-started/installation\" >Nuxt的文档<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"http://redisdoc.com/string/get.html\" >Redis文档<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><ul>\n<li>node v10以上环境</li>\n<li>Vue-CLI前端工具</li>\n</ul>\n<h1 id=\"创建SSR架构项目\"><a href=\"#创建SSR架构项目\" class=\"headerlink\" title=\"创建SSR架构项目\"></a>创建SSR架构项目</h1><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/%E7%BD%91%E7%AB%99SSR%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84%E5%9B%BE.png\"\n                      alt=\"网站SSR项目架构图\"\n                ></p>\n<h2 id=\"Vue-CLI创建项目\"><a href=\"#Vue-CLI创建项目\" class=\"headerlink\" title=\"Vue-CLI创建项目\"></a>Vue-CLI创建项目</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 待续</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"调整项目目录结构\"><a href=\"#调整项目目录结构\" class=\"headerlink\" title=\"调整项目目录结构\"></a>调整项目目录结构</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 待续</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改vue-config-js配置\"><a href=\"#修改vue-config-js配置\" class=\"headerlink\" title=\"修改vue.config.js配置\"></a>修改vue.config.js配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 待续</span><br></pre></td></tr></table></figure>\n<h2 id=\"服务端vue-router客户端router同步\"><a href=\"#服务端vue-router客户端router同步\" class=\"headerlink\" title=\"服务端vue router客户端router同步\"></a>服务端vue router客户端router同步</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 待续</span><br></pre></td></tr></table></figure>\n<h2 id=\"Vuex-全局状态\"><a href=\"#Vuex-全局状态\" class=\"headerlink\" title=\"Vuex 全局状态\"></a>Vuex 全局状态</h2><h3 id=\"服务端vuex-store初始化以及挂载\"><a href=\"#服务端vuex-store初始化以及挂载\" class=\"headerlink\" title=\"服务端vuex store初始化以及挂载\"></a>服务端vuex store初始化以及挂载</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 待续</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端接管服务端的vuex-store并动态注册\"><a href=\"#客户端接管服务端的vuex-store并动态注册\" class=\"headerlink\" title=\"客户端接管服务端的vuex store并动态注册\"></a>客户端接管服务端的vuex store并动态注册</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 待续</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n","categories":["开发","前端"],"tags":["vue","ssr"]},{"title":"Vue-l10n 货币本地化Vue插件","url":"/%E5%BC%80%E5%8F%91/Vue-l10n-%E8%B4%A7%E5%B8%81%E6%9C%AC%E5%9C%B0%E5%8C%96Vue%E6%8F%92%E4%BB%B6.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>前段时间看到项目里面的货币符号和金额转换的Vue 全局过滤器，感觉这样实现一点都不优雅，而且存在不完善，不统一的问题。比如每次都需要实时算，每次切换货币要强刷页面重新加载。然后就想到了<a class=\"link\"   href=\"https://kazupon.github.io/vue-i18n/guide/number.html\" >vue-i18n<i class=\"fas fa-external-link-alt\"></i></a>这个vue官方插件，多语言国际化，他是怎么做到不刷新页面切换语言的？于是就去观摩<a class=\"link\"   href=\"https://github.com/kazupon/vue-i18n\" >vue-i18n的源码<i class=\"fas fa-external-link-alt\"></i></a>，然后我就参考<a class=\"link\"   href=\"https://kazupon.github.io/vue-i18n/guide/number.html\" >vue-i18n<i class=\"fas fa-external-link-alt\"></i></a>写了一个<a class=\"link\"   href=\"https://docs.patpat.site/doc\" >vue-l10n<i class=\"fas fa-external-link-alt\"></i></a>的货币转换本地化的Vue插件。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"vue-l10n-一个货币显示本地化的Vue插件\"><a href=\"#vue-l10n-一个货币显示本地化的Vue插件\" class=\"headerlink\" title=\"vue-l10n 一个货币显示本地化的Vue插件\"></a>vue-l10n 一个货币显示本地化的Vue插件</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>vue-l10n-currency 是参照vue-i18n 的vue插件方式实现的一个 货币本地化转换Vue插件。<br>Dmoe预览和文档 <a class=\"link\"   href=\"http://docs.patpat.site/\" >vue-l10n example<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install vue-l10n -D</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><h4 id=\"在Vue项目的main-js中\"><a href=\"#在Vue项目的main-js中\" class=\"headerlink\" title=\"在Vue项目的main.js中\"></a>在Vue项目的main.js中</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> VueL10nCurrency <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-l10n&#x27;</span></span><br><span class=\"line\">Vue.use(VueL10nCurrency)</span><br><span class=\"line\"><span class=\"keyword\">const</span> l10nCurrency = <span class=\"keyword\">new</span> VueL10nCurrency(&#123;</span><br><span class=\"line\">  isoCode: <span class=\"string\">&#x27;USD&#x27;</span>,</span><br><span class=\"line\">  stuExchangeRate: <span class=\"number\">1</span>,</span><br><span class=\"line\">  utsExchangeRate: <span class=\"number\">1</span>,</span><br><span class=\"line\">  symbolDisplay: <span class=\"string\">&#x27;$&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  l10nCurrency,</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在Vue项目的模板中\"><a href=\"#在Vue项目的模板中\" class=\"headerlink\" title=\"在Vue项目的模板中\"></a>在Vue项目的模板中</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;&#123;&#123;$uts(<span class=\"number\">34.62</span>)&#125;&#125;&lt;<span class=\"regexp\">/p&gt; /</span><span class=\"regexp\">/ 按照汇率从USD(美元)转换为Self(本地货币)，保留两位小数四舍五入</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;p&gt;&#123;&#123;$utsc(34.62)&#125;&#125;&lt;/</span>p&gt; <span class=\"comment\">// 按照汇率从USD(美元)转换为Self(本地货币)，保留两位小数,两位小数后值大于0就进位</span></span><br><span class=\"line\">&lt;p&gt;&#123;&#123;$utst(<span class=\"number\">34.62</span>)&#125;&#125;&lt;<span class=\"regexp\">/p&gt; /</span><span class=\"regexp\">/ 按照汇率从USD(美元)转换为Self(本地货币)，保留两位小数,舍去两位小数后的值不进位</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;p&gt;&#123;&#123;$stu(237.41)&#125;&#125;&lt;/</span>p&gt; <span class=\"comment\">// 按照汇率从Self(本地货币)转换为USD(美元)保留两位小数四舍五入</span></span><br><span class=\"line\">&lt;p&gt;&#123;&#123;$textUts(<span class=\"string\">&quot;这个金额是$23.5,那个金额是$18.99&quot;</span>)&#125;&#125;&lt;<span class=\"regexp\">/p&gt; /</span><span class=\"regexp\">/ 将一段字符串中的$符号的金额，按照汇率从USD(美元)转换为Self(本地货币)，保留两位小数四舍五入</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;p&gt;&#123;&#123;$textUtsi(&quot;这个金额是$23.5,那个金额是$18.99&quot;)&#125;&#125;&lt;/</span>p&gt; <span class=\"comment\">// 将一段字符串中的$符号的金额，按照汇率从USD(美元)转换为Self(本地货币)，保留整数四舍五入</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在js中切换货币\"><a href=\"#在js中切换货币\" class=\"headerlink\" title=\"在js中切换货币\"></a>在js中切换货币</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isoCode = <span class=\"string\">&#x27;CNY&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> utsExchangeRate = <span class=\"number\">6.85765</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> stuExchangeRate = <span class=\"number\">0.14582</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> symbolDisplay = <span class=\"string\">&#x27;￥&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$l10nCurrency.currency = &#123;</span><br><span class=\"line\">  isoCode,</span><br><span class=\"line\">  stuExchangeRate,</span><br><span class=\"line\">  utsExchangeRate,</span><br><span class=\"line\">  symbolDisplay</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"API文档\"><a href=\"#API文档\" class=\"headerlink\" title=\"API文档\"></a>API文档</h3><p><strong>Vue全局对象</strong></p>\n<p>l10nCurrency</p>\n<p><code>this.$l10nCurrency </code></p>\n<p>对象属性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">currency: &#123;</span><br><span class=\"line\">    isoCode:&#39;USD&#39;,</span><br><span class=\"line\">    stuExchangeRate: 1,</span><br><span class=\"line\">    utsExchangeRate: 1,</span><br><span class=\"line\">    symbolDisplay: ‘$’</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_computeTypeEnum: &#123;</span><br><span class=\"line\">    ROUNDING: &#39;rounding&#39;, &#x2F;&#x2F; 保留两位小数，四舍五入</span><br><span class=\"line\">    CARRY: &#39;carry&#39;, &#x2F;&#x2F; 保留两位小数，后面有值就进位</span><br><span class=\"line\">    TRUNCATION: &#39;truncation&#39;, &#x2F;&#x2F; 保留两位小数，直接舍去后面的小数</span><br><span class=\"line\">    INT: &#39;int&#39;, &#x2F;&#x2F; 保留整数，四舍五入</span><br><span class=\"line\">    ORIGINAL: &#39;original&#39; &#x2F;&#x2F; 保留原始计算结果</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>Vue全局函数</th>\n<th>使用</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>uts</td>\n<td>$uts(34.62)</td>\n<td>美元转当地货币金额（保留两位小数，四舍五入）</td>\n</tr>\n<tr>\n<td>utsc</td>\n<td>$utsc(34.62)</td>\n<td>美元转当地货币金额（保留两位小数，后面有值就进位）</td>\n</tr>\n<tr>\n<td>utst</td>\n<td>$utst(34.62)</td>\n<td>美元转当地货币金额（保留两位小数，直接舍去后面的小数）</td>\n</tr>\n<tr>\n<td>stu</td>\n<td>$stu(237.41)</td>\n<td>当地货币美元金额（保留两位小数，四舍五入）</td>\n</tr>\n<tr>\n<td>stuo</td>\n<td>$stuo(237.41)</td>\n<td>当地货币美元金额（保留原始计算结果）</td>\n</tr>\n<tr>\n<td>textUts</td>\n<td>$textUts(“这个金额是$23.5,那个金额是$18.99”)</td>\n<td>美元字符串转当地货币字符串（保留两位小数，四舍五入）</td>\n</tr>\n<tr>\n<td>textUtsi</td>\n<td>$textUtsi(“这个金额是$23.5,那个金额是$18.99”)</td>\n<td>美元字符串转当地货币字符串（保留整数，四舍五入）</td>\n</tr>\n</tbody></table>\n","categories":["开发"],"tags":["vue","js","plugin"]},{"title":"VueJs单页面应用SEO解决方案","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/VueJs%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8SEO%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html","content":"<h1 id=\"首先我们来科普一下几个概念：\"><a href=\"#首先我们来科普一下几个概念：\" class=\"headerlink\" title=\"首先我们来科普一下几个概念：\"></a>首先我们来科普一下几个概念：</h1><p>1）SPA：单页面应用，基于vue框架开发的项目很多都属于单页面应用；<br>2）SSR ：server side rendering, 服务端渲染，额，这个不是订阅那个SSR，我一开始就弄混了；<br>3）Prerender：预渲染，Prerender.io是基于Node.js的程序，它可以让你的JavaScript网站支持搜索引擎，社交媒体，并且它兼容所有的JavaScript框架和库。它采用PhantomJS渲染JavaScript的网页然后呈现为HTML。此外，我们可以实现的prerender服务层来缓存访问过的页面，这将大大提高性能；<br>4）SEO：搜索引擎优化，指通过对网站进行站内优化、修复和站外优化，从而提高网站的网站关键词排名以及公司产品的曝光度。<br>5）Nuxt：是一个基于 Vue.js 的通用应用框架，预设了利用Vue.js开发服务端渲染的应用所需要的各种配置，可以为基于 Vue.js 的应用提供生成对应的静态站点的功能。</p>\n<span id=\"more\"></span>\n\n<p>SPA 进化到如今，已经从「拼能力」逐渐过渡到「拼体验」,大家也把目光转向了 SPA 相对多页后端渲染应用的两个最大缺陷</p>\n<ul>\n<li>首屏时间</li>\n<li>SEO（Search Engine Optimization）</li>\n</ul>\n<p>这次我主要讲解决SEO的问题，下面请看思维导图:<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/SEO%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.png\"\n                      alt=\"SEO解决方案\"\n                ></p>\n<h1 id=\"Nuxt-js-服务端渲染-静态资源生成器方案\"><a href=\"#Nuxt-js-服务端渲染-静态资源生成器方案\" class=\"headerlink\" title=\"Nuxt.js 服务端渲染/静态资源生成器方案\"></a><a class=\"link\"   href=\"https://zh.nuxtjs.org/guide\" >Nuxt.js<i class=\"fas fa-external-link-alt\"></i></a> 服务端渲染/静态资源生成器方案</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>从头搭建一个服务端渲染的应用是相当复杂的。Nuxt.js 让这一切变得简单。Nuxt 是一个基于 Vue 生态的更高层的框架，为开发服务端渲染的 Vue 应用提供了极其便利的开发体验。更酷的是，你甚至可以用它来做为静态站生成器。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>Nuxt.js 默认的配置涵盖了大部分使用情形，可通过 nuxt.config.js 来覆盖默认的配置。</p>\n<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><p>Nuxt.js 依据 pages 目录结构自动生成 vue-router 模块的路由配置。<br>可自定义动态路由，嵌套路由 甚至给路由跳转定义过度动效</p>\n<h2 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h2><p>方便灵活的自定义应用模板、页面、布局和HTML头部等内容。</p>\n<h2 id=\"异步数据\"><a href=\"#异步数据\" class=\"headerlink\" title=\"异步数据\"></a>异步数据</h2><p>Nuxt.js 扩展了 Vue.js，增加了一个叫 asyncData 的方法，使得我们可以在设置组件的数据之前能异步获取或处理数据。</p>\n<h2 id=\"资源文件\"><a href=\"#资源文件\" class=\"headerlink\" title=\"资源文件\"></a>资源文件</h2><p>区分Webpack构建资源和静态资源<br>资源文件随心管理，对于不需要通过 Webpack 处理的静态资源文件，可以放置在 static 目录中。</p>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><p>可以配置需要在 根vue.js应用 实例化之前需要运行的 Javascript 插件，可以是你自己写的库或第三方模块。</p>\n<h2 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h2><p>模块是Nuxt.js扩展，可以扩展其核心功能并添加无限的集成。</p>\n<h2 id=\"Vuex状态树\"><a href=\"#Vuex状态树\" class=\"headerlink\" title=\"Vuex状态树\"></a>Vuex状态树</h2><p>对于每个大项目来说，使用状态树 (store) 管理状态 (state) 十分有必要。Nuxt.js内核实现了Vuex。</p>\n<h2 id=\"命令和部署\"><a href=\"#命令和部署\" class=\"headerlink\" title=\"命令和部署\"></a>命令和部署</h2><p>Nuxt.js 提供了一系列常用的命令, 用于开发或发布部署。<br>Nuxt.js 提供了两种发布部署应用的方式：服务端渲染应用部署 和 静态应用部署。</p>\n<h1 id=\"Prerender（将JS网站生成静态HTLM被搜索引擎完美地抓取）\"><a href=\"#Prerender（将JS网站生成静态HTLM被搜索引擎完美地抓取）\" class=\"headerlink\" title=\"Prerender（将JS网站生成静态HTLM被搜索引擎完美地抓取）\"></a><a class=\"link\"   href=\"https://prerender.io/\" >Prerender<i class=\"fas fa-external-link-alt\"></i></a>（将JS网站生成静态HTLM被搜索引擎完美地抓取）</h1><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15432847324890.jpg\"\n                      alt=\"15432847324890\"\n                ></p>\n<h2 id=\"介绍-1\"><a href=\"#介绍-1\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>在服务器上安装的Prerender.io中间件将检查每个请求，以查看它是否是来自爬网程序的请求。如果它是来自爬虫的请求，则中间件将向Prerender.io发送请求以获取该页面的静态HTML。如果没有，请求将继续到您的正常服务器路由。爬虫永远不会知道您正在使用Prerender.io，因为响应始终通过您的服务器。</p>\n<h2 id=\"谷歌批准\"><a href=\"#谷歌批准\" class=\"headerlink\" title=\"谷歌批准\"></a>谷歌批准</h2><p>Google编写了Prerender.io遵循的AJAX抓取规范，因此Google和其他搜索引擎可以保证您的网站正确抓取</p>\n<h2 id=\"服务端中间件\"><a href=\"#服务端中间件\" class=\"headerlink\" title=\"服务端中间件\"></a>服务端中间件</h2><p>拥有多种编程语言中间件：ExpressJS、Rails(Ruby)、Nginx、Apahe等</p>\n<h2 id=\"价钱\"><a href=\"#价钱\" class=\"headerlink\" title=\"价钱\"></a>价钱</h2><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15432851581549.jpg\"\n                      alt=\"15432851581549\"\n                ></p>\n<h1 id=\"SSR-（server-side-rendering-服务端渲染）方案\"><a href=\"#SSR-（server-side-rendering-服务端渲染）方案\" class=\"headerlink\" title=\"SSR （server side rendering, 服务端渲染）方案\"></a><a class=\"link\"   href=\"https://ssr.vuejs.org/zh/\" >SSR<i class=\"fas fa-external-link-alt\"></i></a> （server side rendering, 服务端渲染）方案</h1><h2 id=\"介绍-2\"><a href=\"#介绍-2\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>将同一个组件渲染为服务器端的 HTML 字符串，将它们直接发送到浏览器，最后将这些静态标记”激活”为客户端上完全可交互的应用程序。</p>\n<h2 id=\"服务器端渲染\"><a href=\"#服务器端渲染\" class=\"headerlink\" title=\"服务器端渲染\"></a>服务器端渲染</h2><ul>\n<li>更好的 SEO，由于搜索引擎爬虫抓取工具可以直接查看完全渲染的页面。</li>\n<li>更快的内容到达时间(time-to-content)，特别是对于缓慢的网络情况或运行缓慢的设备。</li>\n</ul>\n<h2 id=\"使用服SSR时需要权衡之处\"><a href=\"#使用服SSR时需要权衡之处\" class=\"headerlink\" title=\"使用服SSR时需要权衡之处\"></a>使用服SSR时需要权衡之处</h2><ul>\n<li>开发条件所限。浏览器特定的代码，只能在某些生命周期钩子函数(lifecycle hook)中使用；一些外部扩展库(external library)可能需要特殊处理，才能在服务器渲染应用程序中运行。</li>\n<li>涉及构建设置和部署的更多要求。与可以部署在任何静态文件服务器上的完全静态单页面应用程序(SPA)不同，服务器渲染应用程序，需要处于 Node.js server 运行环境。</li>\n<li>更多的服务器端负载。在 Node.js 中渲染完整的应用程序，显然会比仅仅提供静态文件的 server 更加大量占用 CPU 资源(CPU-intensive - CPU 密集)，因此如果你预料在高流量环境(high traffic)下使用，请准备相应的服务器负载，并明智地采用缓存策略。</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><h4 id=\"综上所述3种方案\"><a href=\"#综上所述3种方案\" class=\"headerlink\" title=\"综上所述3种方案\"></a>综上所述3种方案</h4><ul>\n<li>Nuxt.js（对后期可维护性，以及开发效率会比较高，可轻松展核心插件）</li>\n<li>Prerender（可作为临时解决SEO的方案，但不是长期和倾向完美的方案）</li>\n<li>SSR（对研发团队要求高，对服务器要求高。）</li>\n</ul>\n","categories":["开发","前端"],"tags":["js","Vue","SEO","SSR","Nuxt"]},{"title":"ios代码自动布局 Masonry","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/ios%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E5%B8%83%E5%B1%80%E8%87%AA%E5%8A%A8%E5%B8%83%E5%B1%80Masonry.html","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><figure class=\"highlight objectivec\"><table><tr><td class=\"code\"><pre><span class=\"line\">MagicNumber -&gt; autoresizingMask -&gt; autolayout</span><br></pre></td></tr></table></figure>\n\n<p>以下是纯手写代码所经历的关于页面布局的三个时期</p>\n<span id=\"more\"></span>\n\n<ul>\n<li>在iphone1-iphone3gs时代 window的size固定为(320,480) 我们只需要简单计算一下相对位置就好了</li>\n<li>在iphone4-iphone4s时代 苹果推出了retina屏 但是给了码农们非常大的福利:window的size不变</li>\n<li>在iphone5-iphone5s时代 window的size变了(320,568) 这时autoresizingMask派上了用场(为啥这时候不用Autolayout? 因为还要支持ios5呗) 简单的适配一下即可</li>\n<li>在iphone6+时代 window的width也发生了变化(相对5和5s的屏幕比例没有变化) 终于是时候抛弃autoresizingMask改用autolayout了(不用支持ios5了 相对于屏幕适配的多样性来说autoresizingMask也已经过时了)</li>\n</ul>\n<p>那如何快速的上手autolayout呢? 说实话 当年ios6推出的同时新增了autolayout的特性 我看了一下官方文档和demo 就立马抛弃到一边了 因为实在过于的繁琐和啰嗦(有过经验的朋友肯定有同感)</p>\n<p>直到iphone6发布之后 我知道使用autolayout势在必行了 这时想起了以前在浏览Github看到过的一个第三方库Masonry 在花了几个小时的研究使用后 我就将autolayout掌握了(重点是我并没有学习任何的官方文档或者其他的关于autolayout的知识) 这就是我为什么要写下这篇文章来推荐它的原因</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Masonry是一个轻量级的布局框架 拥有自己的描述语法 采用更优雅的链式语法封装自动布局 简洁明了 并具有高可读性 而且同时支持 iOS 和 Max OS X</p>\n<p>我们先来看一段官方的sample code来认识一下Masonry</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"code\"><pre><span class=\"line\">[view1 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    make.edges.equalTo(superview).with.insets(padding);</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<p>看到block里面的那句话: make edges equalTo superview with insets<br>通过链式的自然语言 就把view1给autolayout好了 是不是简单易懂?</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>看一下Masonry支持哪一些属性</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *left;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *top;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *right;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *bottom;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *leading;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *trailing;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *width;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *height;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *centerX;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *centerY;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *baseline;</span><br></pre></td></tr></table></figure>\n<p>这些属性与NSLayoutAttrubute的对照表如下</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/屏幕快照%202015-08-20%20下午10.42.38.png\"\n                      class=\"img-center\" /\n                >\n\n\n\n<p>其中leading与left trailing与right 在正常情况下是等价的 但是当一些布局是从右至左时(比如阿拉伯文?没有类似的经验) 则会对调 换句话说就是基本可以不理不用 用left和right就好了</p>\n<p>在ios8发布后 又新增了一堆奇奇怪怪的属性(有兴趣的朋友可以去瞅瞅) Masonry暂时还不支持(不过你要支持ios6,ios7 就没必要去管那么多了)</p>\n<p>下面进入正题(为了方便 我们测试的superView都是一个size为(300,300)的UIView)</p>\n<p>下面 通过一些简单的实例来简单介绍如何轻松愉快的使用Masonry:</p>\n<h3 id=\"1-基础-居中显示一个view\"><a href=\"#1-基础-居中显示一个view\" class=\"headerlink\" title=\"1. [基础] 居中显示一个view\"></a>1. [基础] 居中显示一个view</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</span><br><span class=\"line\">    <span class=\"comment\">// Do any additional setup after loading the view.</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">UIView</span> *sv = [<span class=\"built_in\">UIView</span> new];</span><br><span class=\"line\">    [sv showPlaceHolder];</span><br><span class=\"line\">    sv.backgroundColor = [<span class=\"built_in\">UIColor</span> blackColor];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:sv];</span><br><span class=\"line\">    [sv mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">        make.center.equalTo(<span class=\"keyword\">self</span>.view);</span><br><span class=\"line\">        make.size.mas_equalTo(<span class=\"built_in\">CGSizeMake</span>(<span class=\"number\">300</span>, <span class=\"number\">300</span>));</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<p>使用我之间写的MMPlaceHolder 可以看到superview已经按照我们预期居中并且设置成了适当的大小</p>\n<p>那么先看看这几行代码</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//从此以后基本可以抛弃CGRectMake了</span></span><br><span class=\"line\"><span class=\"built_in\">UIView</span> *sv = [<span class=\"built_in\">UIView</span> new];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在做autoLayout之前 一定要先将view添加到superview上 否则会报错</span></span><br><span class=\"line\">[<span class=\"keyword\">self</span>.view addSubview:sv];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//mas_makeConstraints就是Masonry的autolayout添加函数 将所需的约束添加到block中行了</span></span><br><span class=\"line\">[sv mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将sv居中(很容易理解吧?)</span></span><br><span class=\"line\">    make.center.equalTo(<span class=\"keyword\">self</span>.view);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//将size设置成(300,300)</span></span><br><span class=\"line\">    make.size.mas_equalTo(<span class=\"built_in\">CGSizeMake</span>(<span class=\"number\">300</span>, <span class=\"number\">300</span>));</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<p>这里有两个问题要分解一下</p>\n<ul>\n<li>首先在Masonry中能够添加autolayout约束有三个函数</li>\n</ul>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">NSArray</span> *)mas_makeConstraints:(<span class=\"keyword\">void</span>(^)(MASConstraintMaker *make))block;</span><br><span class=\"line\">- (<span class=\"built_in\">NSArray</span> *)mas_updateConstraints:(<span class=\"keyword\">void</span>(^)(MASConstraintMaker *make))block;</span><br><span class=\"line\">- (<span class=\"built_in\">NSArray</span> *)mas_remakeConstraints:(<span class=\"keyword\">void</span>(^)(MASConstraintMaker *make))block;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    mas_makeConstraints 只负责新增约束 Autolayout不能同时存在两条针对于同一对象的约束 否则会报错 </span></span><br><span class=\"line\"><span class=\"comment\">    mas_updateConstraints 针对上面的情况 会更新在block中出现的约束 不会导致出现两个相同约束的情况</span></span><br><span class=\"line\"><span class=\"comment\">    mas_remakeConstraints 则会清除之前的所有约束 仅保留最新的约束</span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\">    三种函数善加利用 就可以应对各种情况了</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其次 equalTo 和 mas_equalTo的区别在哪里呢? 其实 mas_equalTo是一个MACRO</li>\n</ul>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mas_equalTo(...)                 equalTo(MASBoxValue((__VA_ARGS__)))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mas_greaterThanOrEqualTo(...)    greaterThanOrEqualTo(MASBoxValue((__VA_ARGS__)))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mas_lessThanOrEqualTo(...)       lessThanOrEqualTo(MASBoxValue((__VA_ARGS__)))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mas_offset(...)                  valueOffset(MASBoxValue((__VA_ARGS__)))</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到 mas_equalTo只是对其参数进行了一个BOX操作(装箱) MASBoxValue的定义具体可以看看源代码 太长就不贴出来了</p>\n<p>所支持的类型 除了NSNumber支持的那些数值类型之外 就只支持CGPoint CGSize UIEdgeInsets</p>\n<p>介绍完这几个问题 我们就继续往下了 PS:刚才定义的sv会成为我们接下来所有sample的superView</p>\n<h3 id=\"2-初级-让一个view略小于其superView-边距为10\"><a href=\"#2-初级-让一个view略小于其superView-边距为10\" class=\"headerlink\" title=\"2. [初级] 让一个view略小于其superView(边距为10)\"></a>2. [初级] 让一个view略小于其superView(边距为10)</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIView</span> *sv1 = [<span class=\"built_in\">UIView</span> new];</span><br><span class=\"line\">[sv1 showPlaceHolder];</span><br><span class=\"line\">sv1.backgroundColor = [<span class=\"built_in\">UIColor</span> redColor];</span><br><span class=\"line\">[sv addSubview:sv1];</span><br><span class=\"line\">[sv1 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    make.edges.equalTo(sv).with.insets(<span class=\"built_in\">UIEdgeInsetsMake</span>(<span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/* 等价于</span></span><br><span class=\"line\"><span class=\"comment\">    make.top.equalTo(self).with.offset(10);</span></span><br><span class=\"line\"><span class=\"comment\">    make.left.equalTo(self).with.offset(10);</span></span><br><span class=\"line\"><span class=\"comment\">    make.bottom.equalTo(self).with.offset(-10);</span></span><br><span class=\"line\"><span class=\"comment\">    make.right.equalTo(self).with.offset(-10);</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/* 也等价于</span></span><br><span class=\"line\"><span class=\"comment\">    make.top.left.bottom.and.right.equalTo(self).with.insets(UIEdgeInsetsMake(10, 10, 10, 10));</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n\n\n<p>可以看到 edges 其实就是top,left,bottom,right的一个简化 分开写也可以 一句话更省事</p>\n<p>那么为什么bottom和right里的offset是负数呢? 因为这里计算的是绝对的数值 计算的bottom需要小于sv的底部高度 所以要-10 同理用于right</p>\n<p>这里有意思的地方是and和with 其实这两个函数什么事情都没做</p>\n<p>原文:<a class=\"link\"   href=\"http://adad184.com/2014/09/28/use-masonry-to-quick-solve-autolayout/\"  title=\"Masonry介绍与使用实践(快速上手Autolayout)\">里脊串的开发随笔<i class=\"fas fa-external-link-alt\"></i></a></p>\n","categories":["开发","前端"],"tags":["ios","autolayout","OC"]},{"title":"node-rsa 生成私钥/公钥 加密/解密 签名/验证","url":"/%E5%BC%80%E5%8F%91/%E6%9C%8D%E5%8A%A1%E7%AB%AF/node-rsa-%E7%94%9F%E6%88%90%E7%A7%81%E9%92%A5-%E5%85%AC%E9%92%A5-%E5%8A%A0%E5%AF%86-%E8%A7%A3%E5%AF%86-%E7%AD%BE%E5%90%8D-%E9%AA%8C%E8%AF%81.html","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>简单介绍使用node-rsa模块生成/导出秘钥,加密/解密,签名/验证</p>\n<p>具体方法见<a class=\"link\"   href=\"https://www.npmjs.com/package/node-rsa#importexport-keys\" >API<i class=\"fas fa-external-link-alt\"></i></a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"首先导入模块\"><a href=\"#首先导入模块\" class=\"headerlink\" title=\"首先导入模块\"></a>首先导入模块</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install node-rsa</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生成-导入导出秘钥\"><a href=\"#生成-导入导出秘钥\" class=\"headerlink\" title=\"生成,导入导出秘钥\"></a>生成,导入导出秘钥</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> key = <span class=\"keyword\">new</span> NodeRSA(&#123;<span class=\"attr\">b</span>: <span class=\"number\">512</span>&#125;);<span class=\"comment\">//生成512位秘钥</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pubkey = key.exportKey(<span class=\"string\">&#x27;pkcs8-public&#x27;</span>);<span class=\"comment\">//导出公钥</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> prikey = key.exportKey(<span class=\"string\">&#x27;pkcs8-private&#x27;</span>);<span class=\"comment\">//导出私钥</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pubKey = <span class=\"keyword\">new</span> NodeRSA(pubKey,<span class=\"string\">&#x27;pkcs8-public&#x27;</span>);<span class=\"comment\">//导入公钥</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> priKey = <span class=\"keyword\">new</span> NodeRSA(priKey,<span class=\"string\">&#x27;pkcs8-private&#x27;</span>);<span class=\"comment\">//导入私钥</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"加密解密\"><a href=\"#加密解密\" class=\"headerlink\" title=\"加密解密\"></a>加密解密</h2><h3 id=\"公钥加密-返回密文\"><a href=\"#公钥加密-返回密文\" class=\"headerlink\" title=\"公钥加密(返回密文):\"></a>公钥加密(返回密文):</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">pubKey = <span class=\"keyword\">new</span> NodeRSA(publicKey,<span class=\"string\">&#x27;pkcs8-public&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> encrypted = pubKey.encrypt(buffer, <span class=\"string\">&#x27;base64&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"私钥解密-返回明文\"><a href=\"#私钥解密-返回明文\" class=\"headerlink\" title=\"私钥解密(返回明文):\"></a>私钥解密(返回明文):</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">priKey = <span class=\"keyword\">new</span> NodeRSA(privateKey,<span class=\"string\">&#x27;pkcs8-private&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> decrypted = priKey.decrypt(buffer, <span class=\"string\">&#x27;utf8&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"签名验证\"><a href=\"#签名验证\" class=\"headerlink\" title=\"签名验证\"></a>签名验证</h2><h3 id=\"私钥签名-返回签名\"><a href=\"#私钥签名-返回签名\" class=\"headerlink\" title=\"私钥签名(返回签名):\"></a>私钥签名(返回签名):</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">priKey = <span class=\"keyword\">new</span> NodeRSA(privateKey,<span class=\"string\">&#x27;pkcs8-private&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> signature = priKey.sign(buffer);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"公钥验证-返回true或false\"><a href=\"#公钥验证-返回true或false\" class=\"headerlink\" title=\"公钥验证(返回true或false):\"></a>公钥验证(返回true或false):</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">pubKey = <span class=\"keyword\">new</span> NodeRSA(publicKey,<span class=\"string\">&#x27;pkcs8-public&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> flag = pubKey.verify(buffer, signature);</span><br></pre></td></tr></table></figure>","categories":["开发","服务端"],"tags":["RSA","Node"]},{"title":"服务器异常电话警报API-云之讯语音通知API","url":"/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%82%E5%B8%B8%E7%94%B5%E8%AF%9D%E8%AD%A6%E6%8A%A5API-%E4%BA%91%E4%B9%8B%E8%AE%AF%E8%AF%AD%E9%9F%B3%E9%80%9A%E7%9F%A5API.html","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近网站流量增大，又逢电商11月12月旺季,担心服务器宕机，找了个电话语音通知的API 云之讯。</p>\n<span id=\"more\"></span>\n\n<p>为了解决这个需求找了几个语音通知的API,最终觉得有两个比较靠谱。</p>\n<ul>\n<li>阿里大于云通讯服务平台。<a class=\"link\"   href=\"https://open-doc.dingtalk.com/docs/api.htm?apiId=25445&scopeId=11872\"  title=\"钉钉|开放平台 语音通知\">（钉钉|开放平台 语音通知）<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li>云之讯语音通知。 <a class=\"link\"   href=\"http://docs.ucpaas.com/doku.php?id=%E8%AF%AD%E9%9F%B3%E9%80%9A%E7%9F%A5:home_yytznew_rest#%E8%AF%AD%E9%9F%B3%E9%80%9A%E7%9F%A5%E8%AF%9D%E5%8D%95%E5%9B%9E%E8%B0%83%E6%8E%A5%E5%8F%A3_api\"  title=\"云之讯|开放平台 语音通知\">（云之讯|开放平台 语音通知）<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<p>这个两个都算是比较靠谱的了，后面由于考虑阿里大于的申请流程更麻烦（大公司一般流程都比较多），所以选择云之讯。</p>\n<p>然后就写了个云之讯API的composer包：<a class=\"link\"   href=\"https://packagist.org/packages/patpat/cloud-message\"  title=\"patpat/cloud-message\">patpat/cloud-message<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"php-composer安装\"><a href=\"#php-composer安装\" class=\"headerlink\" title=\"php composer安装\"></a>php composer安装</h2><p>在composer.json require下加上</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;patpat/cloud-message&quot;</span>: <span class=\"string\">&quot;^1.0.6&quot;</span>,</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<p>.env 需要配置的参数,新增config文件 cloud_message.php 内容如下</p>\n<pre><code>return [\n\n    //注册云之讯官网，在控制台中即可获取此参数\n    &#39;account_sid&#39; =&gt;  env(&#39;CLOUD_MESSAGE_ACCOUNT_SID&#39;, &#39;&#39;),\n\n    //账户授权令牌, 在控制台中即可获取此参数\n    &#39;auth_token&#39; =&gt;  env(&#39;CLOUD_MESSAGE_AUTH_TOKEN&#39;, &#39;&#39;),\n\n    //应用id\n    &#39;app_id&#39; =&gt;  env(&#39;CLOUD_MESSAGE_APP_ID&#39;, &#39;&#39;),\n\n    //来电显示的号码（需要去申请开通号码）\n    &#39;caller&#39; =&gt; env(&#39;CLOUD_MESSAGE_CALLER&#39;, &#39;057112345678&#39;),\n\n];\n</code></pre>\n<p>调用</p>\n<pre><code>$cloudMessage = new CloudMessage();\n$result = $cloudMessage-&gt;sendVoiceNotify(&quot;13560710913&quot;, &quot;服务器异常警告&quot;);\nif($result &amp;&amp; $result[&#39;resp&#39;][&#39;respCode&#39;] == &#39;000000&#39;)&#123;\n    //成功\n&#125;else&#123;\n    //失败, error_code: $result[&#39;resp&#39;][&#39;respCode&#39;]\n&#125;\n</code></pre>\n","categories":["开发","后端"],"tags":["server","notice"]},{"title":"旅行记录","url":"/%E7%94%9F%E6%B4%BB/%E7%85%A7%E7%89%87/%E6%97%85%E8%A1%8C%E8%AE%B0%E5%BD%95.html","content":"<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/13.jpg\"\n                     \n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/16.jpg\"\n                     \n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/20.jpg\"\n                     \n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/26.jpg\"\n                     \n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/3.jpg\"\n                     \n                ></p>\n<h2 id=\"选做桌面\"><a href=\"#选做桌面\" class=\"headerlink\" title=\"选做桌面\"></a>选做桌面</h2><p> 一个好看的可以给工作之余带来好心情<br> 一个有意义的可以让你回想起很多美好的事情</p>\n<span id=\"more\"></span>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/IMG_3912.PNG\"\n                      alt=\"IMG_3912\"\n                ></p>\n<h2 id=\"视频好看吗\"><a href=\"#视频好看吗\" class=\"headerlink\" title=\"视频好看吗\"></a>视频好看吗</h2><p> 高清动画片<br><video width=\"620\" controls \nposter=\"https://cdn.patpat.site/WX20180529-220354.png\" \nsrc=\"https://archive.org/download/BigBuckBunny_124/Content/big_buck_bunny_720p_surround.mp4\"><br></video></p>\n<p> 放松心情<br> 尽情畅想</p>\n","categories":["生活","照片"]},{"title":"Xcode10.1 iPhone has denied the launch request","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/Xcode10-1-iPhone-has-denied-the-launch-request.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>测试环境<br>Xcode10.1<br>iPhone8 ios12.1.4<br>真机调试的时出现下图报错<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15525532058593.jpg\"\n                     \n                ></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Google上找答案\"><a href=\"#Google上找答案\" class=\"headerlink\" title=\"Google上找答案\"></a>Google上找答案</h2><div style='background-color: blanchedalmond;padding: 10px 10px 10px 10px'>\nAfter days of research and thanks for the help @Little Green Viper I found a solution.\n\n<p>Basically, some Apple Worldwide Developer Relations Certification Authority weren’t working after the update, but were able to compile successful for the iOS 11. Then, the most risky solution is deleting all the Apple Worldwide Developer Certificates, BUT before to do that, try creating a new user on your Mac</p>\n<p>(System Preferences &gt; Users and groups &gt; New User ) that should work.</p>\n<p>Now you have to options, work in the new user or re-sign the certificates, in my personal case, I picked up the first option.</p>\n</div>\n翻译上面的👆\n<div style='background-color: aqua;padding: 10px 10px 10px 10px'>\n基本上，有些Apple Worldwide Developer Relations Certification Authority人在更新后没有工作，但能够成功编译iOS 11。然后，最危险的解决方案是删除所有Apple Worldwide Developer Certificates，但在此之前，尝试创建一个新用户Mac\n\n<p>（System Preferences&gt; Users and groups&gt; New User）应该工作。</p>\n<p>现在你必须选择，在新用户中工作或重新签署证书，在我个人的情况下，我选择了第一个选项。</p>\n</div>\n\n<p><a class=\"link\"   href=\"https://stackoverflow.com/questions/52415694/ios-12-ipad-denied-launch-request-xcode/53676140#53676140\" >Stackverfow上的链接<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><font color=red><strong>但是遗憾的是以上方法我试了 对我的环境并没有用。</strong></font></p>\n<h2 id=\"找各种清理本地缓存的方式\"><a href=\"#找各种清理本地缓存的方式\" class=\"headerlink\" title=\"找各种清理本地缓存的方式\"></a>找各种清理本地缓存的方式</h2><p>最后找到一种方式对我有用。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15525545113324.jpg\"\n                     \n                ><br>Edit Scheme -&gt; Executable &gt; Ask On Launch<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15525545544247.jpg\"\n                     \n                ></p>\n<p>出现这个错误的原因是手机的缓存了不正确的签名数据,<br>主要是因为多个项目用到了同样的bundle ID导致</p>\n","categories":["开发","前端"],"tags":["ios","Xcode"]},{"title":"比'Vue Cli'更高纬度的下一代前端工具|尤雨溪新品Vite的魔力","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/%E6%AF%94Vue-Cli-%E6%9B%B4%E9%AB%98%E7%BA%AC%E5%BA%A6%E7%9A%84%E4%B8%8B%E4%B8%80%E4%BB%A3%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7-%E5%B0%A4%E9%9B%A8%E6%BA%AA%E6%96%B0%E5%93%81Vite%E7%9A%84%E9%AD%94%E5%8A%9B.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>现在前端cli工具已经比较成熟，而且用的也很方便，但是最近又出现了比’Vue Cli’更高纬度的下一代前端工具|尤雨溪新品Vite的魔力。<br>这些工具的出现是为了解决 ES Modules 模块系统本身的环境兼容问题、以及零散的模块文件导致的频繁网络请求发送和模块化发散的问题等等。<br>既然已经有了 Webpack，尤大再整一个 Vite 到底有啥用呢？</p>\n<span id=\"more\"></span>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16138110052185.jpg\"\n                      alt=\"本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包器（module bundler）。\"\n                ></p>\n<p>Vue 脚手架工具 vue-cli 使用 webpack 进行打包，开发时可以启动本地开发服务器，实时预览。因为需要对整个项目文件进行打包，开发服务器启动缓慢。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16138111670208.jpg\"\n                     \n                ></p>\n<p>而对于开发时文件修改后的热更新 HMR 也存在同样的问题。<br>Webpack 的热更新会以当前修改的文件为入口重新 build 打包，所有涉及到的依赖也都会被重新加载一次。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16138111910731.jpg\"\n                     \n                ></p>\n<p>Vite 则很好地解决了上面的两个问题。<br><strong>先来打包问题</strong><br>vite 只启动一台静态页面的服务器，对文件代码不打包，服务器会根据客户端的请求加载不同的模块处理，实现真正的按需加载。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16138112360691.jpg\"\n                     \n                ></p>\n<p><strong>对于热更新问题</strong><br>vite 采用立即编译当前修改文件的办法。同时 vite 还会使用缓存机制( http 缓存 =&gt; vite 内置缓存 )，加载更新后的文件内容。<br>所以，vite 具有了<strong>快速冷启动、按需编译、模块热更新</strong>等优良特质。<br>综上所述，vite 构建项目与 vue-cli 构建的项目在开发模式下还是有比较大的区别：</p>\n<ol>\n<li>Vite 在开发模式下不需要打包可以直接运行，使用的是 ES6 的模块化加载规则；Vue-CLI 开发模式下必须对项目打包才可以运行。</li>\n<li>Vite 基于缓存的热更新，Vue-CLI 基于 Webpack 的热更新。</li>\n</ol>\n<p><strong>说了这么多，vite 到底应该怎么用呢？</strong><br>我们简单来使用一下。<br>确保 Node 版本是大于等于 12 的。<br>使用 NPM 命令：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm init @vitejs/app</span><br></pre></td></tr></table></figure>\n<p>然后按照提示进行操作！<br>您还可以通过其他命令行选项直接指定项目名称和要使用的模板。例如，要搭建Vite + Vue项目，请运行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"># npm 6.x</span><br><span class=\"line\">npm init @vitejs/app my-vue-app --template vue</span><br><span class=\"line\"></span><br><span class=\"line\"># npm 7+, extra double-dash is needed:</span><br><span class=\"line\">npm init @vitejs/app my-vue-app -- --template vue</span><br><span class=\"line\"></span><br><span class=\"line\"># yarn</span><br><span class=\"line\">yarn create @vitejs/app my-vue-app --template vue</span><br></pre></td></tr></table></figure>\n\n<p>支持的模板预设包括：</p>\n<ul>\n<li>vanilla</li>\n<li>vue</li>\n<li>vue-ts</li>\n<li>react</li>\n<li>react-ts</li>\n<li>preact</li>\n<li>preact-ts</li>\n<li>lit-element</li>\n<li>lit-element-ts</li>\n</ul>\n<p>详细查看<a class=\"link\"   href=\"https://vitejs.dev/guide/#scaffolding-your-first-vite-project\" >vite官方文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16138115837949.jpg\"\n                      alt=\"我本地创建Vite项目截图\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16138116296897.jpg\"\n                      alt=\"我本地运行Vite项目截图\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16138110542452.jpg\"\n                     \n                ></p>\n","categories":["开发","前端"],"tags":["vue","vue-cli","vite"]},{"title":"解决Ubuntu命令-git pull总是提示输入密码问题(Enter passphrase for key /root/.ssh/id_rsa:)","url":"/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/%E8%A7%A3%E5%86%B3Ubuntu%E5%91%BD%E4%BB%A4-git-pull%E6%80%BB%E6%98%AF%E6%8F%90%E7%A4%BA%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E9%97%AE%E9%A2%98-Enter-passphrase-for-key-root-ssh-id-rsa.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最新新开的一台阿里云ECS服务来玩，在安装git并 按照 <a class=\"link\"   href=\"https://help.github.com/en/articles/connecting-to-github-with-ssh\" >使用SSH连接到GitHub<i class=\"fas fa-external-link-alt\"></i></a> 文档ssh授权git账户后，每次git命令操作都提要输入密码很烦！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">project-name git:(master) git pull</span><br><span class=\"line\">Enter passphrase for key &#39;&#x2F;root&#x2F;.ssh&#x2F;id_rsa&#39;: </span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><p>在Google上找一下，发现这个stackoverflow问题<br><a class=\"link\"   href=\"https://stackoverflow.com/questions/21095054/ssh-key-still-asking-for-password-and-passphrase\" >SSH Key - Still asking for password and passphrase<i class=\"fas fa-external-link-alt\"></i></a><br>一些介绍两种方案👇</p>\n<h2 id=\"方案一：添加没有钥匙串的身份\"><a href=\"#方案一：添加没有钥匙串的身份\" class=\"headerlink\" title=\"方案一：添加没有钥匙串的身份\"></a>方案一：添加没有钥匙串的身份</h2><p>用以下命令添加一个没有密码的id_rsa</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-add ~&#x2F;.ssh&#x2F;id_rsa </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方案二：使用钥匙串添加身份\"><a href=\"#方案二：使用钥匙串添加身份\" class=\"headerlink\" title=\"方案二：使用钥匙串添加身份\"></a>方案二：使用钥匙串添加身份</h2><p>把密码记住保存在钥匙串中<br>对于在mac os上-K大写</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-add -K ~&#x2F;.ssh&#x2F;id_rsa</span><br></pre></td></tr></table></figure>\n<p>对于在Ubuntu上-k小写</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-add -k ~&#x2F;.ssh&#x2F;id_rsa</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如果执行以上命令还是报如下错误\"><a href=\"#如果执行以上命令还是报如下错误\" class=\"headerlink\" title=\"如果执行以上命令还是报如下错误\"></a>如果执行以上命令还是报如下错误</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">➜  ~ ssh-add -k ~&#x2F;.ssh&#x2F;id_rsa</span><br><span class=\"line\">Could not open a connection to your authentication agent.</span><br></pre></td></tr></table></figure>\n<p>这是因为没有启动ssh-agent，执行以下命令启动ssh-agent</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">eval &quot;$(ssh-agent -s)&quot;</span><br><span class=\"line\">&gt; Agent pid 59566</span><br></pre></td></tr></table></figure>\n<p>详细操作如下图<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15532356518597.jpg\"\n                     \n                ></p>\n<p>如果还有疑问请参考GitHub文档<br><a class=\"link\"   href=\"https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#adding-your-ssh-key-to-the-ssh-agent\" >将SSH密钥添加到ssh-agent<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>其实是在一开始按照GitHub的文档操作就有漏了<br><a class=\"link\"   href=\"https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#adding-your-ssh-key-to-the-ssh-agent\" >将SSH密钥添加到ssh-agent<i class=\"fas fa-external-link-alt\"></i></a><br>步骤，直接跳过这个到了第四步<br><a class=\"link\"   href=\"https://help.github.com/en/articles/adding-a-new-ssh-key-to-your-github-account\" >4.将SSH密钥添加到您的GitHub帐户<i class=\"fas fa-external-link-alt\"></i></a><br>所以才遗留下了这个一直要输入密码的坑。<br>如果是按照GitHub文档上正确操作步骤不会出现这个问题。<br>最终罪魁祸首是自己看GitHub的因为文档时没有认真。</p>\n","categories":["开发","后端"],"tags":["git",".ssh"]},{"title":"Stripe支付平台对接技术方案","url":"/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/Stripe%E6%94%AF%E4%BB%98%E5%B9%B3%E5%8F%B0%E5%AF%B9%E6%8E%A5%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88.html","content":"<h1 id=\"我接触过的几个支付管理平台-Adyen、Braintree、PayPal、Stripe。\"><a href=\"#我接触过的几个支付管理平台-Adyen、Braintree、PayPal、Stripe。\" class=\"headerlink\" title=\"我接触过的几个支付管理平台 Adyen、Braintree、PayPal、Stripe。\"></a>我接触过的几个支付管理平台 <a class=\"link\"   href=\"https://docs.adyen.com/developers\" >Adyen<i class=\"fas fa-external-link-alt\"></i></a>、<a class=\"link\"   href=\"https://developers.braintreepayments.com/\" >Braintree<i class=\"fas fa-external-link-alt\"></i></a>、<a class=\"link\"   href=\"https://developer.paypal.com/\" >PayPal<i class=\"fas fa-external-link-alt\"></i></a>、<a class=\"link\"   href=\"https://stripe.com/docs/development\" >Stripe<i class=\"fas fa-external-link-alt\"></i></a>。</h1><p>最近新接触的Stripe支付平台，相比前几个我感觉Stripe更专业一些，后台管理功能清晰，操作方便，体验好。<br>开发文档也很清晰，相对前之前接触的支付平台开发文档,Stripe这个我觉得更容易快速了解其所有API,以及功能。API参数及参数说明很清晰，返回数据结构很合理，对应的API返回对应对象属性很容易理解。不像PayPal返回结果特别不好用，夹着各种键值对，结构凌乱。</p>\n<p>下面记录我集成Stripe支付平台过程。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"前端SDK集成-Android、IOS、JS\"><a href=\"#前端SDK集成-Android、IOS、JS\" class=\"headerlink\" title=\"前端SDK集成: Android、IOS、JS\"></a><font size=5>前端SDK集成: <a class=\"link\"   href=\"https://stripe.com/docs/mobile/android/standard\" >Android<i class=\"fas fa-external-link-alt\"></i></a>、<a class=\"link\"   href=\"https://stripe.com/docs/mobile/ios/custom\" >IOS<i class=\"fas fa-external-link-alt\"></i></a>、<a class=\"link\"   href=\"https://stripe.com/docs/stripe-js/elements/quickstart\" >JS<i class=\"fas fa-external-link-alt\"></i></a></font></h1><h2 id=\"IOS-SDK集成-前端相关这里只做粗略讲解，PHP后端再详细讲解。\"><a href=\"#IOS-SDK集成-前端相关这里只做粗略讲解，PHP后端再详细讲解。\" class=\"headerlink\" title=\"IOS SDK集成(前端相关这里只做粗略讲解，PHP后端再详细讲解。\"></a><font size=4>IOS SDK集成(前端相关这里只做粗略讲解，PHP后端再详细讲解。</font></h2><p>建议用pods 安装SDK，如果不了解Pods 请前往<a class=\"link\"   href=\"https://guides.cocoapods.org/using/getting-started.html\" >CocoaPods<i class=\"fas fa-external-link-alt\"></i></a> 了解更多。<br>在Pods/Podfile文件下添加如下：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"code\"><pre><span class=\"line\">pod <span class=\"string\">&#x27;Stripe&#x27;</span>, <span class=\"string\">&#x27;13.0.0&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>然后终端执行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pod update</span><br></pre></td></tr></table></figure>\n\n<p>之后就根据 <a class=\"link\"   href=\"https://stripe.com/docs/mobile/ios/custom\" >Stripe IOS相关文档<i class=\"fas fa-external-link-alt\"></i></a>编写相关代码</p>\n<p>在集成过程中前端SDK会需要一个Publishable key ,这个Publishable key需要注册Stripe账户后登陆到Stripe管理后台，进入到 <a class=\"link\"   href=\"https://dashboard.stripe.com/account/apikeys\" >Dashboard<i class=\"fas fa-external-link-alt\"></i></a> Developers-&gt;API keys模块页面上获取。</p>\n<p>Stripe 的API keys有 Publishable key(公钥) 和 Secret key(私钥)</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Publishable key 大概格式</span></span><br><span class=\"line\">测试环境：pk_test_***********************</span><br><span class=\"line\">正式环境：pk_live_***********************</span><br><span class=\"line\"><span class=\"comment\">//Secret key 大概格式</span></span><br><span class=\"line\">测试环境：sk_test_***********************</span><br><span class=\"line\">正式环境：sk_live_***********************</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Publishable key 可以公开在前端代码里面，就是给前端SDK用的，在前端输入银行卡信息后，前端需要用Publishable key和卡信息生成一个token传给后端，由于我们公司的<a class=\"link\"   href=\"https://www.pcisecuritystandards.org/\" >PCI<i class=\"fas fa-external-link-alt\"></i></a>认证还在办理中，所以用户的卡信息是不能直接传到我们后台服务器，<a class=\"link\"   href=\"https://stripe.com/docs/security#validating-pci-compliance\" >Stripe的SDK是符合PCI规范的<i class=\"fas fa-external-link-alt\"></i></a>我们主要通过Stripe的SDK来生成一个token,后端拿这个token可以调用Stripe的API去添加卡或者付款，前端用银行卡信息生成的这个token只能使用一次并且两个小时内有效。</li>\n<li>Secret key 相当于拥有你Secret账户的数据的新增、修改、删除权限。所以这个是要严格秘密的保存在服务端配置文件里面。</li>\n</ul>\n<h2 id=\"Android-SDK集成也简单讲一下\"><a href=\"#Android-SDK集成也简单讲一下\" class=\"headerlink\" title=\"Android SDK集成也简单讲一下\"></a><font size=4>Android SDK集成也简单讲一下</font></h2><p>使用<a class=\"link\"   href=\"https://developer.android.com/studio/intro/\" >Android Studio<i class=\"fas fa-external-link-alt\"></i></a>和<a class=\"link\"   href=\"https://www.jetbrains.com/help/idea/2016.3/getting-started-with-android-development.html\" >IntelliJ<i class=\"fas fa-external-link-alt\"></i></a>来安装Stripe Android库类似。您不需要克隆回购站或下载任何文件。只需将以下内容添加到项目build.gradle文件中，位于依赖项部分。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">implementation <span class=\"string\">&#x27;com.stripe:stripe-android:6.1.2&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>Android 的前端代码集成逻辑也基本是一致的。都是最后通过用户输入的卡信息和Publishable key生成一个token传给后台。</p>\n<h2 id=\"网站-js-SDK集成也简单讲一下\"><a href=\"#网站-js-SDK集成也简单讲一下\" class=\"headerlink\" title=\"网站 js SDK集成也简单讲一下\"></a><font size=4>网站 js SDK集成也简单讲一下</font></h2><p>Card Element Quickstart<br>使用我们预先构建的UI组件的<a class=\"link\"   href=\"https://stripe.com/elements\" >Elements<i class=\"fas fa-external-link-alt\"></i></a>，安全地收集敏感卡的详细信息。<br>Elements是Stripe.js的一部分。要开始，请在您的页面上包含此脚本 - 它应始终直接从<a href=\"https://js.stripe.com加载：\">https://js.stripe.com加载：</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">&quot;https://js.stripe.com/v3/&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>js SDK的集成跟App有比较大的差别，具体细节查阅 <a class=\"link\"   href=\"https://stripe.com/docs/stripe-js/elements/quickstart\" >Stripe.js &amp; Elements<i class=\"fas fa-external-link-alt\"></i></a><br>不过最后都是前端 用 卡信息和Publishable key生成一个token传给后台。</p>\n<h1 id=\"Stripe-PHP后台集成详细说明（编辑中）\"><a href=\"#Stripe-PHP后台集成详细说明（编辑中）\" class=\"headerlink\" title=\"Stripe PHP后台集成详细说明（编辑中）\"></a><font size=5>Stripe PHP后台集成详细说明（编辑中）</font></h1><h2 id=\"1-安装Stripe-PHP-Composer包\"><a href=\"#1-安装Stripe-PHP-Composer包\" class=\"headerlink\" title=\"1. 安装Stripe PHP Composer包\"></a><font size=4>1. 安装Stripe PHP Composer包</font></h2><p>首先说明下后台环境：nginx服务器，PHP+Laravel5.2, mySql5.6<br>其次对Composer包有疑问的请前往<a class=\"link\"   href=\"https://packagist.org/\" >Packagist<i class=\"fas fa-external-link-alt\"></i></a>了解更多。<br>在PHP项目根目录下的composer.json 的 require下面添加：</p>\n<pre><code>&quot;stripe/stripe-php&quot;: &quot;^6.7.1&quot;\n</code></pre>\n<p>然后执行命令：</p>\n<pre><code>composer update --no-scripts\n</code></pre>\n<p>安装完后，PHP项目的Vendor下面会有Stripe的源码, 在使用一个代码库之前简单阅读以下他的源码是有必要的，看源码，你会更清楚这个代码库有什么，你需要什么。</p>\n<h2 id=\"2-配置Stripe-API业务及异常处理类\"><a href=\"#2-配置Stripe-API业务及异常处理类\" class=\"headerlink\" title=\"2. 配置Stripe API业务及异常处理类\"></a><font size=4>2. 配置Stripe API业务及异常处理类</font></h2><p>在项目中新建一个XXStripe.php，这个类专门处理Stripe API调用前后相关业务逻辑，以及API错误异常catch</p>\n<p>PHP环境变量配置 .env<br>在 .env下配置Secret key, 就是前面说到的秘密的保存在服务端的私钥。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">;STRIPE payment</span><br><span class=\"line\">STRIPE_API_KEY=sk_test_***********************</span><br></pre></td></tr></table></figure>\n<p>配置PHP支付相关config文件 payment.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> [</span><br><span class=\"line\">    <span class=\"string\">&#x27;PAYMENT_ENV&#x27;</span> =&gt; env(<span class=\"string\">&#x27;PAYMENT_ENV&#x27;</span>, <span class=\"string\">&#x27;sandbox&#x27;</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&#x27;braintree&#x27;</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">&#x27;merchantId&#x27;</span> =&gt; env(<span class=\"string\">&#x27;BRAINTREE_MERCHANT_ID&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;publicKey&#x27;</span> =&gt; env(<span class=\"string\">&#x27;BRAINTREE_PUBLIC_KEY&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;privateKey&#x27;</span> =&gt; env(<span class=\"string\">&#x27;BRAINTREE_PRIVATE_KEY&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;CESKey&#x27;</span> =&gt; env(<span class=\"string\">&#x27;BRAINTREE_CES_KEY&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&#x27;adyen&#x27;</span> =&gt; [</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">&#x27;app_name&#x27;</span> =&gt; env(<span class=\"string\">&#x27;ADYEN_APP_NAME&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;username&#x27;</span> =&gt; env(<span class=\"string\">&#x27;ADYEN_USERNAME&#x27;</span>,<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;password&#x27;</span> =&gt; env(<span class=\"string\">&#x27;ADYEN_PASSWORD&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;env&#x27;</span> =&gt; env(<span class=\"string\">&#x27;ADYEN_ENV&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;merchant_account&#x27;</span> =&gt; env(<span class=\"string\">&#x27;ADYEN_MERCHANT_ACCOUNT&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;shopper_interaction&#x27;</span> =&gt; env(<span class=\"string\">&#x27;ADYEN_SHOPPER_INTERACTION&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&#x27;payPal&#x27;</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">&#x27;user&#x27;</span> =&gt; env(<span class=\"string\">&#x27;PAYPAL_USER&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;password&#x27;</span> =&gt; env( <span class=\"string\">&#x27;PAYPAL_PASSWORD&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;signature&#x27;</span> =&gt; env( <span class=\"string\">&#x27;PAYPAL_SIGNATURE&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;new_user&#x27;</span> =&gt; env(<span class=\"string\">&#x27;NEW_PAYPAL_USER&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;new_password&#x27;</span> =&gt; env( <span class=\"string\">&#x27;NEW_PAYPAL_PASSWORD&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;new_signature&#x27;</span> =&gt; env( <span class=\"string\">&#x27;NEW_PAYPAL_SIGNATURE&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&#x27;stripe&#x27;</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">&#x27;api_key&#x27;</span> =&gt; env(<span class=\"string\">&#x27;STRIPE_API_KEY&#x27;</span>, <span class=\"string\">&#x27;sk_test_***&#x27;</span>),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>新建XXStripe类 处理Stripe API类参数及返回结果异常处理。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">App</span>\\<span class=\"title\">Modules</span>\\<span class=\"title\">Checkout</span>\\<span class=\"title\">Payment</span>\\<span class=\"title\">Stripe</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Carbon</span>\\<span class=\"title\">Carbon</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Stripe</span>\\<span class=\"title\">Card</span>; <span class=\"comment\">//👇这里可以看到可以引入Stripe各种API类，用来下面调用。</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Stripe</span>\\<span class=\"title\">Charge</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Stripe</span>\\<span class=\"title\">Customer</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Stripe</span>\\<span class=\"title\">Dispute</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Stripe</span>\\<span class=\"title\">Error</span>\\<span class=\"title\">Base</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Stripe</span>\\<span class=\"title\">Refund</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Stripe</span>\\<span class=\"title\">Source</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Stripe</span>\\<span class=\"title\">Stripe</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XXStripe</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//这里取到上面👆config里面的配置的stripe的私钥配置，初始化到Stripe对象里面。</span></span><br><span class=\"line\">        <span class=\"variable\">$stripeConfig</span> = Config::get(<span class=\"string\">&#x27;payment.stripe&#x27;</span>);</span><br><span class=\"line\">        Stripe::setApiKey(<span class=\"variable\">$stripeConfig</span>[<span class=\"string\">&#x27;api_key&#x27;</span>]);</span><br><span class=\"line\">        <span class=\"comment\">//更多相关初始化配置阅读Stripe源码。</span></span><br><span class=\"line\"><span class=\"comment\">//        Stripe::setAccountId(&quot;&quot;); </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addCard</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果Customer已经create 则直接拿之前存customer_id,往这个customer下面添加卡。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$customerPayment</span>) &#123; <span class=\"comment\">//$customerPayment用$user_id去自己的业务库查是否创建过stripe customer的记录，没有则执行else逻辑</span></span><br><span class=\"line\">            <span class=\"variable\">$customer</span> = Customer::retrieve(<span class=\"variable\">$customerPayment</span>-&gt;braintree_token);</span><br><span class=\"line\">            <span class=\"variable\">$card</span> = <span class=\"variable\">$customer</span>-&gt;sources-&gt;create([<span class=\"string\">&quot;source&quot;</span> =&gt; <span class=\"variable\">$token</span>]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//如何没有记录则在Stripe平台上Customer::create</span></span><br><span class=\"line\">            <span class=\"variable\">$customer</span> = Customer::create([</span><br><span class=\"line\">                <span class=\"string\">&#x27;source&#x27;</span> =&gt; <span class=\"variable\">$token</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;email&#x27;</span> =&gt; <span class=\"variable\">$email</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;metadata&#x27;</span> =&gt; [<span class=\"string\">&#x27;patpat_customer_id&#x27;</span> =&gt; <span class=\"variable\">$customerId</span>, <span class=\"string\">&#x27;firstname&#x27;</span> =&gt; <span class=\"variable\">$user</span>-&gt;customers_firstname, <span class=\"string\">&#x27;lastname&#x27;</span> =&gt; <span class=\"variable\">$user</span>-&gt;customers_lastname, <span class=\"string\">&#x27;phone&#x27;</span> =&gt; <span class=\"variable\">$phone</span>]</span><br><span class=\"line\">            ]);</span><br><span class=\"line\">            <span class=\"comment\">//添加卡后台拿到返回的$card对象存到对应业务库</span></span><br><span class=\"line\">            <span class=\"variable\">$card</span> = current(<span class=\"variable\">$customer</span>-&gt;sources-&gt;data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//你的业务代码，把Stripe 返回$customer,$card的觉得有用的对象参数 存到对应的业务表里。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setDefaultCard</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//$stripeCustomerId需要根据userId查到之前创建用户数存的stripeCustomerId </span></span><br><span class=\"line\">        <span class=\"comment\">//stripeCustomerId大概格式:cus_CvpoGuZa0BnJEz</span></span><br><span class=\"line\">        <span class=\"variable\">$customer</span> = Customer::retrieve(<span class=\"variable\">$stripeCustomerId</span>);</span><br><span class=\"line\">        <span class=\"variable\">$customer</span>-&gt;default_source = <span class=\"variable\">$cardId</span>; <span class=\"comment\">//$cardId也是之前存的用户的$cards列表，用户可能选一张卡来做完默认卡，$cardId大概格式:card_1CWwT1G5LmXuczdEAZo0lB2E</span></span><br><span class=\"line\">        <span class=\"variable\">$customer</span>-&gt;save();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable\">$customer</span>-&gt;default_source;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deleteCard</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//用$stripeCustomerId查找到Stripe支付的对应用户</span></span><br><span class=\"line\">        <span class=\"variable\">$customer</span> = Customer::retrieve(<span class=\"variable\">$stripeCustomerId</span>);</span><br><span class=\"line\">        <span class=\"comment\">//删除用户下对应的银行卡</span></span><br><span class=\"line\">        <span class=\"variable\">$customer</span>-&gt;sources-&gt;retrieve(<span class=\"variable\">$cardId</span>)-&gt;delete();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pay</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$charge</span> = Charge::create([</span><br><span class=\"line\">                <span class=\"string\">&#x27;amount&#x27;</span> =&gt; <span class=\"variable\">$totalPay</span>*<span class=\"number\">100</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;currency&#x27;</span> =&gt; <span class=\"string\">&#x27;usd&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;description&#x27;</span> =&gt; <span class=\"string\">&#x27;Example charge&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;capture&#x27;</span> =&gt; <span class=\"literal\">false</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;customer&#x27;</span> =&gt; <span class=\"variable\">$stripeCustomerId</span>, <span class=\"comment\">//$stripeCustomerId是之前添加卡的时候存的</span></span><br><span class=\"line\">                <span class=\"string\">&#x27;source&#x27;</span> =&gt; <span class=\"variable\">$cardId</span>, <span class=\"comment\">//这个参数可不传，传这个参数就会用这个指定的card付款，$cardId也是添加卡的时候存的，</span></span><br><span class=\"line\">                <span class=\"string\">&#x27;metadata&#x27;</span> =&gt;[<span class=\"string\">&#x27;order_id&#x27;</span>=&gt;<span class=\"variable\">$orderId</span>]</span><br><span class=\"line\">            ]); </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (\\Stripe\\<span class=\"built_in\">Error</span>\\Base <span class=\"variable\">$e</span>)&#123; <span class=\"comment\">//catch Stripe的API基本异常</span></span><br><span class=\"line\">            <span class=\"comment\">// Display a very generic error to the user, and maybe send</span></span><br><span class=\"line\">            <span class=\"comment\">// yourself an email</span></span><br><span class=\"line\">            Log::info(<span class=\"variable\">$e</span>-&gt;getStripeCode());</span><br><span class=\"line\">            Log::info(<span class=\"variable\">$e</span>-&gt;getMessage());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (<span class=\"built_in\">Exception</span> <span class=\"variable\">$e</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// Something else happened, completely unrelated to Stripe</span></span><br><span class=\"line\">        &#125;   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-使用前端传过来的token添加Stripe-Customers-或直接付款-Payments\"><a href=\"#3-使用前端传过来的token添加Stripe-Customers-或直接付款-Payments\" class=\"headerlink\" title=\"3. 使用前端传过来的token添加Stripe Customers 或直接付款 Payments\"></a><font size=4>3. 使用前端传过来的token添加Stripe Customers 或直接付款 Payments</font></h2><p>通过前端调用后端API传过来 user_id 和 token。<br>前端通过Stripe SDK生成的token可以用来调用任何需要token参数的 Stripe API, 可以用来在Stripe后台创建Customer, 用token创建Customer是会把token关联的银行卡信息自动添加到这个Customer下面。创建Customer会返回创建的customer_id,这个customer_id可以用来以后长期支付。<br>所以我这边的处理是拿到token后并不是去直接支付，因为这个token只能使用一次并且两个小时内有效。<br>用来创建Customer并自动在这个Customer下面添加一张银行卡，这样能拿到返回的Customer信息，Customer信息里面有customer_id card_id等信息，可以用来以后长期支付。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addCard</span>(<span class=\"params\"><span class=\"variable\">$token</span>, <span class=\"variable\">$email</span>, <span class=\"variable\">$user_id</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果Customer已经create 则直接拿之前存customer_id,往这个customer下面添加卡。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$customerPayment</span>) &#123; <span class=\"comment\">//$customerPayment用$user_id去自己的业务库查是否创建过stripe customer的记录，没有则执行else逻辑</span></span><br><span class=\"line\">        <span class=\"variable\">$customer</span> = Customer::retrieve(<span class=\"variable\">$customerPayment</span>-&gt;braintree_token);</span><br><span class=\"line\">        <span class=\"variable\">$card</span> = <span class=\"variable\">$customer</span>-&gt;sources-&gt;create([<span class=\"string\">&quot;source&quot;</span> =&gt; <span class=\"variable\">$token</span>]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//如何没有记录则在Stripe平台上Customer::create</span></span><br><span class=\"line\">        <span class=\"variable\">$customer</span> = Customer::create([</span><br><span class=\"line\">            <span class=\"string\">&#x27;source&#x27;</span> =&gt; <span class=\"variable\">$token</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;email&#x27;</span> =&gt; <span class=\"variable\">$email</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;metadata&#x27;</span> =&gt; [<span class=\"string\">&#x27;patpat_customer_id&#x27;</span> =&gt; <span class=\"variable\">$customerId</span>, <span class=\"string\">&#x27;firstname&#x27;</span> =&gt; <span class=\"variable\">$user</span>-&gt;customers_firstname, <span class=\"string\">&#x27;lastname&#x27;</span> =&gt; <span class=\"variable\">$user</span>-&gt;customers_lastname, <span class=\"string\">&#x27;phone&#x27;</span> =&gt; <span class=\"variable\">$phone</span>]</span><br><span class=\"line\">        ]);</span><br><span class=\"line\">        <span class=\"comment\">//添加卡后台拿到返回的$card对象存到对应业务库</span></span><br><span class=\"line\">        <span class=\"variable\">$card</span> = current(<span class=\"variable\">$customer</span>-&gt;sources-&gt;data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//你的业务代码，把Stripe 返回$customer,$card的觉得有用的对象参数 存到对应的业务表里。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-Stripe默认卡设置，及删除卡\"><a href=\"#4-Stripe默认卡设置，及删除卡\" class=\"headerlink\" title=\"4. Stripe默认卡设置，及删除卡\"></a><font size=4>4. Stripe默认卡设置，及删除卡</font></h2><p>Strip跟<a class=\"link\"   href=\"https://docs.adyen.com/developers\" >Adyen<i class=\"fas fa-external-link-alt\"></i></a>、<a class=\"link\"   href=\"https://developers.braintreepayments.com/\" >Braintree<i class=\"fas fa-external-link-alt\"></i></a>支付平台有点不一样的地方</p>\n<ul>\n<li>Strip是创建Customer，创建的Customer对应你们的需要付款的用户，Strip的Customer下面可以添加Card或者是在Customer下面添加Sources，Sources是支付源，比如支付宝，微信，PayPal，微软支付等本地化支付。<br>然后Customer下面的这些多张Cards和多个Sources只有个一个被设置为默认支付方式，如下图<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/WechatIMG174.jpeg\"\n                     \n                ></li>\n</ul>\n<p>所以业务方去调用付款API的时候可以只传一个customer_id的参数和付款相关金额货币code,就可以完成付款，因为在Stripe上的Customer已经设置了一个默认付款方式</p>\n<ul>\n<li>Braintree和Adyen平台是给card授权后生成一个长期有效的可用于付款的card对应的付款token。</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setDefaultCard</span>(<span class=\"params\"><span class=\"variable\">$userId</span>, <span class=\"variable\">$cardId</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//$stripeCustomerId需要根据userId查到之前创建用户数存的stripeCustomerId </span></span><br><span class=\"line\">    <span class=\"comment\">//stripeCustomerId大概格式:cus_CvpoGuZa0BnJEz</span></span><br><span class=\"line\">    <span class=\"variable\">$customer</span> = Customer::retrieve(<span class=\"variable\">$stripeCustomerId</span>);</span><br><span class=\"line\">    <span class=\"variable\">$customer</span>-&gt;default_source = <span class=\"variable\">$cardId</span>; <span class=\"comment\">//$cardId也是之前存的用户的$cards列表，用户可能选一张卡来做完默认卡，$cardId大概格式:card_1CWwT1G5LmXuczdEAZo0lB2E</span></span><br><span class=\"line\">    <span class=\"variable\">$customer</span>-&gt;save();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$customer</span>-&gt;default_source;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>删除卡</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deleteCard</span>(<span class=\"params\"><span class=\"variable\">$stripeCustomerId</span>, <span class=\"variable\">$cardId</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//用$stripeCustomerId查找到 对应用户</span></span><br><span class=\"line\">    <span class=\"variable\">$customer</span> = Customer::retrieve(<span class=\"variable\">$stripeCustomerId</span>);</span><br><span class=\"line\">    <span class=\"comment\">//删除用户下对应的银行卡</span></span><br><span class=\"line\">    <span class=\"variable\">$customer</span>-&gt;sources-&gt;retrieve(<span class=\"variable\">$cardId</span>)-&gt;delete();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-使用Stripe创建的Customers-ID支付或者指定Customers的某张卡支付\"><a href=\"#5-使用Stripe创建的Customers-ID支付或者指定Customers的某张卡支付\" class=\"headerlink\" title=\"5. 使用Stripe创建的Customers ID支付或者指定Customers的某张卡支付\"></a><font size=4>5. 使用Stripe创建的Customers ID支付或者指定Customers的某张卡支付</font></h2><p>Stripe的Charge类用于支付等API调用，下面我们看看使用 customer_id 付款代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pay</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"variable\">$charge</span> = Charge::create([</span><br><span class=\"line\">            <span class=\"string\">&#x27;amount&#x27;</span> =&gt; <span class=\"variable\">$totalPay</span>*<span class=\"number\">100</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;currency&#x27;</span> =&gt; <span class=\"string\">&#x27;usd&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;description&#x27;</span> =&gt; <span class=\"string\">&#x27;Example charge&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;capture&#x27;</span> =&gt; <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;customer&#x27;</span> =&gt; <span class=\"variable\">$stripeCustomerId</span>, <span class=\"comment\">//$stripeCustomerId是之前添加卡的时候存的</span></span><br><span class=\"line\">            <span class=\"string\">&#x27;source&#x27;</span> =&gt; <span class=\"variable\">$cardId</span>, <span class=\"comment\">//这个参数可不传，传这个参数就会用这个指定的card付款，$cardId也是添加卡的时候存的，</span></span><br><span class=\"line\">            <span class=\"string\">&#x27;metadata&#x27;</span> =&gt;[<span class=\"string\">&#x27;order_id&#x27;</span>=&gt;<span class=\"variable\">$orderId</span>]</span><br><span class=\"line\">        ]); </span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (\\Stripe\\<span class=\"built_in\">Error</span>\\Base <span class=\"variable\">$e</span>)&#123; <span class=\"comment\">//catch Stripe的API基本异常</span></span><br><span class=\"line\">        <span class=\"comment\">// Display a very generic error to the user, and maybe send</span></span><br><span class=\"line\">        <span class=\"comment\">// yourself an email</span></span><br><span class=\"line\">        Log::info(<span class=\"variable\">$e</span>-&gt;getStripeCode());</span><br><span class=\"line\">        Log::info(<span class=\"variable\">$e</span>-&gt;getMessage());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (<span class=\"built_in\">Exception</span> <span class=\"variable\">$e</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Something else happened, completely unrelated to Stripe</span></span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用Stripe每个API都建议 try catch以为Stripe的错误信息不会在api结果中放回，Stripe的api一般只返回成功后的对象，错误信息都是通过异常抛出，更多Error信息了解 进入<a class=\"link\"   href=\"https://stripe.com/docs/api/php#errors\" >Stripe API Error<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"6-支付交易Capture-扣款-Released-放弃扣款-Refund-扣款后退款\"><a href=\"#6-支付交易Capture-扣款-Released-放弃扣款-Refund-扣款后退款\" class=\"headerlink\" title=\"6. 支付交易Capture(扣款), Released(放弃扣款), Refund(扣款后退款)\"></a><font size=4>6. 支付交易Capture(扣款), Released(放弃扣款), Refund(扣款后退款)</font></h2><p>从上面付款可以看到参数 ‘capture’ =&gt; false, 这个参数主要是支付只授权，不立马扣款，给一个时间段给用户取消订单，这个时间段交易未capture，交易取消是不扣手续的，如果直接Capture了，用户取消订单，对业务方会产生额外手续费用。所以我们选择支付动作时只授权，不Capture。一般是一天批量Capture一次交易。<br>Capture代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">capture</span>(<span class=\"params\"><span class=\"variable\">$transactionId</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//$transactionId 是在付款API Charge::create的时候返回的Charge的id,大概格式：ch_1CWgDWGmkmBuczdEnIVX1PXo</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$charge</span> = Charge::retrieve(<span class=\"variable\">$transactionId</span>);</span><br><span class=\"line\">        <span class=\"variable\">$charge</span> = <span class=\"variable\">$charge</span>-&gt;capture();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$charge</span>-&gt;status == <span class=\"string\">&#x27;succeeded&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;status&#x27;</span> =&gt; <span class=\"literal\">true</span>, <span class=\"string\">&#x27;payment_type&#x27;</span>=&gt;PaymentType::STRIPE, <span class=\"string\">&#x27;content&#x27;</span>=&gt;[<span class=\"string\">&#x27;braintree_transaction_id&#x27;</span>=&gt;<span class=\"variable\">$charge</span>-&gt;id], <span class=\"string\">&#x27;message&#x27;</span>=&gt;<span class=\"string\">&quot;Settled Succeed!&quot;</span>];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;status&#x27;</span> =&gt; <span class=\"literal\">false</span>, <span class=\"string\">&#x27;payment_type&#x27;</span>=&gt;PaymentType::STRIPE, <span class=\"string\">&#x27;content&#x27;</span>=&gt;[<span class=\"string\">&#x27;braintree_transaction_id&#x27;</span>=&gt;<span class=\"variable\">$charge</span>-&gt;id], <span class=\"string\">&#x27;message&#x27;</span>=&gt;<span class=\"string\">&quot;Settled Failure!&quot;</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (\\<span class=\"built_in\">Exception</span> <span class=\"variable\">$e</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;status&#x27;</span> =&gt; <span class=\"literal\">false</span>, <span class=\"string\">&#x27;payment_type&#x27;</span>=&gt;PaymentType::STRIPE, <span class=\"string\">&#x27;content&#x27;</span>=&gt;[<span class=\"string\">&#x27;braintree_transaction_id&#x27;</span>=&gt;<span class=\"variable\">$transactionId</span>], <span class=\"string\">&#x27;message&#x27;</span>=&gt;<span class=\"variable\">$e</span>-&gt;getMessage()];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Released、Refund 代码是一样的，这个也是Stripe跟我之前接触的<a class=\"link\"   href=\"https://docs.adyen.com/developers\" >Adyen<i class=\"fas fa-external-link-alt\"></i></a>、<a class=\"link\"   href=\"https://developers.braintreepayments.com/\" >Braintree<i class=\"fas fa-external-link-alt\"></i></a>支付平台不一样的地方。<br>Adyen平台未扣款交易 调用 cancel() API, 扣款后调用的是refund() API<br>Braintree平台未扣款交易 调用的是 void() API, 扣款后调用的是 refund()API<br>Stripe Released、Refund代码如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">refund</span>(<span class=\"params\"><span class=\"variable\">$transactionId</span>, <span class=\"variable\">$amount</span>, <span class=\"variable\">$refundId</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//$transactionId 是在付款API Charge::create的时候返回的Charge的id,大概格式：ch_1CWgDWGmkmBuczdEnIVX1PXo</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$refund</span> = Refund::create([<span class=\"string\">&#x27;charge&#x27;</span> =&gt; <span class=\"variable\">$transactionId</span>, <span class=\"string\">&#x27;amount&#x27;</span> =&gt; <span class=\"variable\">$amount</span>, <span class=\"string\">&#x27;metadata&#x27;</span>=&gt; [<span class=\"string\">&#x27;refund_id&#x27;</span>=&gt;<span class=\"variable\">$refundId</span>]]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$refund</span>-&gt;status == <span class=\"string\">&#x27;succeeded&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;status&#x27;</span> =&gt; <span class=\"literal\">true</span>, <span class=\"string\">&#x27;payment_type&#x27;</span>=&gt;PaymentType::STRIPE, <span class=\"string\">&#x27;content&#x27;</span>=&gt;[<span class=\"string\">&#x27;stripe_refund_id&#x27;</span>=&gt;<span class=\"variable\">$refund</span>-&gt;id], <span class=\"string\">&#x27;message&#x27;</span>=&gt;<span class=\"string\">&quot;Refund Succeed!&quot;</span>];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;status&#x27;</span> =&gt; <span class=\"literal\">false</span>, <span class=\"string\">&#x27;payment_type&#x27;</span>=&gt;PaymentType::STRIPE, <span class=\"string\">&#x27;content&#x27;</span>=&gt;[<span class=\"string\">&#x27;stripe_refund_id&#x27;</span>=&gt;<span class=\"variable\">$refund</span>-&gt;id], <span class=\"string\">&#x27;message&#x27;</span>=&gt;<span class=\"string\">&quot;Refund Failure!&quot;</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (\\<span class=\"built_in\">Exception</span> <span class=\"variable\">$e</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;status&#x27;</span> =&gt; <span class=\"literal\">false</span>, <span class=\"string\">&#x27;payment_type&#x27;</span>=&gt;PaymentType::STRIPE, <span class=\"string\">&#x27;content&#x27;</span>=&gt;[<span class=\"string\">&#x27;braintree_transaction_id&#x27;</span>=&gt;<span class=\"variable\">$transactionId</span>], <span class=\"string\">&#x27;message&#x27;</span>=&gt;<span class=\"variable\">$e</span>-&gt;getMessage()];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>更多Stripe API对象详细请查阅 <a class=\"link\"   href=\"https://stripe.com/docs/api/php\" >Stripe API 文档<i class=\"fas fa-external-link-alt\"></i></a>、<br><a class=\"link\"   href=\"https://stripe.com/docs/api/php#customers\" >对应Customers对象API文档<i class=\"fas fa-external-link-alt\"></i></a>、<br><a class=\"link\"   href=\"https://stripe.com/docs/api/php#charges\" >对应Charges(付款)对象API文档<i class=\"fas fa-external-link-alt\"></i></a>、<br><a class=\"link\"   href=\"https://stripe.com/docs/api/php#cards\" >对应Cards对象API文档<i class=\"fas fa-external-link-alt\"></i></a>、<br><a class=\"link\"   href=\"https://stripe.com/docs/api/php#refunds\" >对应Refunds对象API文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"7-交易风控相关，Stripe各种状态变更通知接收并更新到数据库\"><a href=\"#7-交易风控相关，Stripe各种状态变更通知接收并更新到数据库\" class=\"headerlink\" title=\"7. 交易风控相关，Stripe各种状态变更通知接收并更新到数据库\"></a><font size=4>7. 交易风控相关，Stripe各种状态变更通知接收并更新到数据库</font></h2><p>最后介绍一下Stripe的 <a class=\"link\"   href=\"https://stripe.com/docs/webhooks\" >Webhooks<i class=\"fas fa-external-link-alt\"></i></a> </p>\n<p>Webhooks 主要跟Adyen的通知类似，把用户及交易的所有事件状态变更通知到我们服务器，我们接受到通知时对不同情况做出相应处理。<br>比如Stripe检测到某笔交易是诈骗订单，会把订单状态及信息通知到我们，我们风控得知后可以对交易进行处理，已经后期风控规则的控制。</p>\n<p>Webhooks的配置需要在Stripe 的 <a class=\"link\"   href=\"https://dashboard.stripe.com/account/webhooks\" >Dashboard<i class=\"fas fa-external-link-alt\"></i></a> 中 的 Developers-&gt;Webhooks中添加业务服务器回调utl。</p>\n<p>然后在业务回调url中获取通知数据，把有用的数据存到业务库中。以及可以对相应特殊类型进行业务逻辑处理。</p>\n<p>这样有了通知数据后可以很方便的从通知数据中查询到任何的交易状态变更，以及Customer状态变更。</p>\n","categories":["开发","后端"],"tags":["js","ios","payment","php","android"]},{"title":"史蒂夫·乔布斯传阅读笔记","url":"/%E7%94%9F%E6%B4%BB/%E9%98%85%E8%AF%BB/%E4%B9%94%E5%B8%83%E6%96%AF%E4%BC%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前一直说Steve Jobs是自己的偶像，但是自己真的了解他吗？知道他经历过什么吗？知道他是什么性格的人吗？不知道！之前只看到他的光辉，只知道他创建了苹果公司，只知道他重新定义了智能手机，只知道他发布的所有苹果产品都那么完美。然而根本就不知道他是怎么做到的！</p>\n<span id=\"more\"></span>\n\n<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><h3 id=\"九型人格的接触\"><a href=\"#九型人格的接触\" class=\"headerlink\" title=\"九型人格的接触\"></a>九型人格的接触</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/jiuxingrengetu.PNG\"\n                      alt=\"jiuxingrengetu\"\n                ><br>最开始接触<a class=\"link\"   href=\"https://baike.baidu.com/item/%E4%B9%9D%E5%9E%8B%E4%BA%BA%E6%A0%BC/9222652?fr=aladdin\" >九型人格<i class=\"fas fa-external-link-alt\"></i></a>是在一次公司组织管理层培训的时候，之前我从来没有参与过类似管理的培训。这次培训的讲师是张世民老师(互联网营销模式创新专家), 我之前一直对这类培训都感觉不屑，认为自己技术牛就可以行走江湖了，真是愚昧的认知。还好，遇到到张世民老师刷新了我的认知。张老师对所授课程吹毛求疵。深刻掌握受众特性，充分利用视频、图文素材和案例，受众参与度强。大气大方，引人入胜；擅长体验式教学，喜好创新，兼顾深度与趣味。张世明老师这次给我们讲的课程主要内容有：</p>\n<ul>\n<li>角色认知（定位与转换）</li>\n<li>目标管理（结果导向）</li>\n<li>高效沟通（步骤和方法）</li>\n<li>团队管理（教练式领导力）</li>\n<li>创新驱动（方法和实践）</li>\n<li>文化建设（价值观驱动）</li>\n<li>数据思维（大数据为导向）</li>\n</ul>\n<p>其中团队管理里面张世民老师详细的有深度的带我们了解了九型人格，要管理好一个团队，一定要认清团队里面每个人的性格，学会用对的方式跟对应性格的人相处。更重要一点是要认清自己的本性（九型人格号码），认识到自己的九型号码的缺点，正确的向对应九型号码的人学习。人的本性是改不了的，俗话说 “江山易改，本性难移！”，但是人的行为是后天可控制的。</p>\n<h3 id=\"对自己九型数字定位\"><a href=\"#对自己九型数字定位\" class=\"headerlink\" title=\"对自己九型数字定位\"></a>对自己九型数字定位</h3><p>在初步了解完九型人格的时候，我开始也纠结自己是属于哪个号码。我一开始认为自己是1号-完美型(理性正直、坚持自己的标准、有极强的原则性、外表严肃、做事有条理、有效率、高要求、认真…………)，但是后面听老师说5号-思想型，大多数程序员都是5号。然后看了下5号的性格特点（冷静、机智、分析力强、总喜欢思考、渴望比别人懂得多、不喜欢喧闹、喜欢独处、不善于与人打交道…………），然后我深信自己是5号-思想型。后面还加了张世民老师的微信，跟他聊了几句，我说我深信自己是5号-思想型，张世民老师也认同我的判断。</p>\n<p>然而过了两个多月，我再深入的感受九型人格。看过九型人格方面的书，不过这种要靠实际去感受的东西，通过文字是了解不透的。后面通过喜马拉雅上面的一个音频让我对九型人格有了更深入一层的认知和感受。这个音频是“<a class=\"link\"   href=\"https://m.ximalaya.com/share/album/346032?wechat=true&uid=121668980&shrdv=1DCBEF3E-2A88-44BF-807F-9F0ACF56D2B4&shrh5=iphone&shrid=16c73f97912c4a1&shrdh=1&shrpid=16c73f97912fceb\" >九型人格_现场版<i class=\"fas fa-external-link-alt\"></i></a>” 讲师-雷鸣。为什么是现场版，我认为现场版跟容易被带进那种感觉当中，我认为九型是需要靠感觉去悟的，而不是靠纯文字的书籍。</p>\n<p>在听完这个现场版音频后，我否定了我自己是5号-理智型。因为5号的好学不卷、喜欢用自己的智慧和理论去驾驭他人、喜欢分析事物及探讨抽象的观念从而内心充实、百分百用脑做人等等，这些5号的性格特点我没有！5号的世界观：“这个世界是具有侵略性的。我需要私人空间来思考，来为自己好好做准备”，这个世界观貌似跟我也不太符合。5号的关注点：事物的原理、文化的本质、世界动作的规律、复杂的理论等等，这些也不太是我关心的事情。 我结合我自己内心真正的感受，我是偏感觉区的人，我是一个自我的人，我是一个多愁善感的人。找到心区号码的4号，我认为我应该属于这个号码-自我型、浪漫型、艺术型，别笑。。。我真是这一类型。</p>\n<p><strong>4号的性格特点：</strong></p>\n<ul>\n<li>多愁善感，追求浪漫，情感世界较为丰富及充满幻想，容易受伤</li>\n<li>讲究个性，恐惧平淡，时常觉得自己与众不同，又有时觉得自己有缺憾和不足</li>\n<li>过分情绪化，敏感</li>\n<li>遇见别人否定或拒绝时往往退缩，觉得别人不明白自己，不理解自己</li>\n<li>与人分享不只喜悦，更多的是悲伤</li>\n<li>工作效率和情绪挂钩，有灵气，有很强的创造力</li>\n<li>对美感有独到的见解</li>\n<li>有强烈的占有欲，有时嫉妒，有时羡慕</li>\n<li>崇尚自由自在，不喜欢被约束和压制</li>\n<li>不了解人情世故，自我，风格我行我素</li>\n</ul>\n<p><strong>4号的世界观：</strong><br>我曾经被抛弃，没有人了解我，我更要找到我自己。</p>\n<p><strong>4号的关注点：</strong><br>内心的各种感觉，事物缺失的部分，遥不可及的幻想世界。</p>\n<p><strong>4号的代表人物：</strong><br>张国荣、徐志摩、王菲、梁朝伟、周杰伦、罗大佑、乔布斯</p>\n<p>以上4号人格相关的资料收集于书本文章和各种演讲音频。看完4号的相关信息，我深深的感受了一下自己，没错我就是4号-自我型、浪漫型、艺术型。</p>\n<h3 id=\"得知乔布斯跟自己都是4号人格\"><a href=\"#得知乔布斯跟自己都是4号人格\" class=\"headerlink\" title=\"得知乔布斯跟自己都是4号人格\"></a>得知乔布斯跟自己都是4号人格</h3><p>在看完4号代表人物里面的人，我感觉有些跟我性格很像，也不完全像（我还有更多比他们奇怪独特的地方）。看到代表人物里面有乔布斯，我有点怀疑，乔布斯竟然会是4号性格的人，是什么造就了他这样的性格，我想更多的去了解他，因为我自做IOS开发以来，一直把他当做偶像。</p>\n<p>于是我去百度了一下：“乔布斯 九型人格”<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/IMG_3716.PNG\"\n                      alt=\"IMG_3716\"\n                ></p>\n<p>然后我的书架上就多了一本《史蒂夫·乔布斯传》。在后面的阅读中会陆续更新阅读笔记。</p>\n<h2 id=\"开始阅读\"><a href=\"#开始阅读\" class=\"headerlink\" title=\"开始阅读\"></a>开始阅读</h2><p>“那些疯狂到以为自己能够改变世界的人，才能真正的改变世界。”<br>    苹果“非同凡响”广告，1997</p>\n<h3 id=\"乔布斯的童年\"><a href=\"#乔布斯的童年\" class=\"headerlink\" title=\"乔布斯的童年\"></a>乔布斯的童年</h3><p>“我小时候，一直都以为自己是个适合人文学科的人，但我喜欢电子设备，然后我看到了我的偶像之一，宝丽来创始人埃德温·兰德（Edwin Land）说的一些话，是关于既擅长人文又能驾驭科学的人的重要性的，于是我决定，我要成为这样的人。” 乔布斯说。他的偶像真的能正面的影响他，要做一个完美的人，是很累的，不过乔布斯坚持下来了。</p>\n<p>乔布斯的亲生父母的家庭环境都相对富豪，他的亲生父亲来自一个显赫的叙利亚家庭，他们家几代都重视教育，都是上很好的大学。他的亲生父亲家里有多家炼油厂和其他多种产业。他的亲生母亲家里做房地产以及多家大型养殖场，但是由于他亲生母亲的父亲认为乔布斯的亲生父亲不是天主教徒，所以强烈反对乔布斯的亲生父母在一起。所以，当在威斯康星大学读研究生的乔安妮（乔布斯亲生母亲）爱上了一个来自叙利亚的穆斯林助教，“约翰”阿卜杜勒法塔赫·钱德里（乔布斯亲生父亲）时，他威胁要与她断绝关系，就一点儿也不让人惊讶了。</p>\n<p>乔布斯的出生就是一件很悲惨的事情，1954年夏天，乔布斯的亲生母亲和他的亲生父亲一起在叙利亚待了两个后怀了他。<br>由于家庭原因和当时的社会原因，流产是一件很不容易的事情，所以乔布斯的亲生母亲决定躲在一个教堂生下他。在他还没出生的时候就已经找到了领养他的人。他亲生母亲对领养人唯一的要求就是要读过大学，一开始的协商好要领养他的是一个律师，但是在乔布斯出生后，因为是男孩，所有放弃了领养，他们期望领养的是女孩。再后面就是被一对高中没毕业的夫妻领养了。他亲生母亲一直不肯再领养协议上签字，直到后面提了个要求：“必须存一笔钱，供乔布斯上大学”。</p>\n<p>幸运的是乔布斯的养父母都是朴实人，对他很好，而且他的养父当过海军，退役后在一家汽修厂修汽车，有时经常回收一些报废汽车修好卖掉，可以赚不少。<br>他养父的超强动手能力，和对做事情追求完美的行为，对乔布斯深有影响。史蒂夫·乔布斯很早就知道了自己是被领养的。“我的父母在这件事情上对我很坦率。” 他养父的诚恳率真性格也影响着他。</p>\n<p>被遗弃。被选择。很特别。 一个型成的性格，不是看他这个人，而是要看他背后的家庭是怎样的，他的童年是如何度过的，他成长过程中最多的情绪是什么。</p>\n<p>我想起我自己，我也是从小被父母抛弃的人，从小跟外婆在农村长大，在读小学的期间，我算是一个完完整整的“留守儿童”。不过我的童年还算自由，也算开心，我外婆对我很好。虽然到现在我外婆老年痴呆了，但是她始终记得我。</p>\n<p>乔布斯6岁的时候就发现自己比他养父母聪明，更有意思的是他养父母也发现这件事情。乔布斯在学校是个喜欢恶作剧的人，跟同学们一起实行‘带宠物上学日’，到处都能看到狗撵猫🤣😂🤣。所以导致乔布斯读小学被老师送回家三次，他父亲已经把他当做特殊孩子来对待了，他希望学校也能这么对待自己的孩子。“听着，这不是他的错，”乔布斯回忆当时父亲是这么对老师说的，“如果你提不起他的兴趣，那是你的错。”乔布斯的记忆中，父母从来没有因为他在学校犯错而惩罚过他。他小学四年级遇到一个好老师，这个老师发现了他的特别之处，用奖励的方式鼓励他学习，之前乔布斯都是很自我，不太听话，在学校经常惹事，幸运的是他遇到了一个好老师，后面乔布斯学习不是为了得到老师的奖励 “我学习不再是为了奖励，只是希望让她开心。” 后面乔布斯被学校批准连跳两级，可以直接上七年级，因为他通过了老师的高年级测试。后面他养父做了一件正确的事情，还是让他只跳一级。然后开学后乔布斯就上六年级了，在比自己大一岁的人群中难免感觉有点不合群。</p>\n<p>像大多数孩子一样，他开始受身边大人们的热情影响。“住在我周围的父亲们大都研究的是很酷的东西，比如太阳能光伏电池和雷达，”乔布斯回忆道，“我对这些东西充满了惊奇，经常向他们问这问那。” 所以乔布斯的成长环境还是不错，周围邻居都是一些工程师，电子设备相关的工作者，乔布斯从小就深受其影响。</p>\n<p>在学校老师问乔布斯：“关于这个世界，你还有什么不明白的？” 乔布斯回答说：“我不明白为什么我爸爸一夜之间就破产了。” 虽然如此，乔布斯还是很为父亲骄傲，因为他从来没有学会那种卑微屈膝的态度和圆滑诡诈的作风。<br>这一点我也相似，我爸爸在08年家里条件富裕点的时候，买了汽车，对于中国农村来说，08年买了汽车已经算是不错的条件了。但是10年，我爸赌钱输了很多钱，还欠了一屁股债。那个时候我妈妈打电话给我哭诉这些事情，我当时在读书，我也一很无助不知道怎么安慰家人，甚至对我的情绪和后面的学业造成影响。我是一个容易被情绪影响做事效率的人，所有那几年我学习成绩都很差。<br>不过虽然如此，我还是心理为我爸感觉骄傲，他虽然输光了钱，但是他还是能站起来，把债还清，期间从未低头，从未学会那种卑微屈膝的态度和圆滑诡诈的作风。</p>\n<p>探索者俱乐部的孩子们被鼓励做一些项目，乔布斯决定做一台频率计数器，这是用来测量一个电子信号中每秒钟的脉冲数量的。他需要一些惠普制造的零件，所以他拿起电话打给了惠普的CEO：“那个时候，所有的电话号码都是登记在册的，所以我在电话簿上寻找住在帕洛奥图的比尔·休利特，然后打到了他家。他接了电话并和我聊了20分钟，之后他给了我那些零件，也给了我一份工作，就在他们制造频率计数器的工厂。” 从这件事情上就能看出他行动力之强大，对权威的不畏惧，对规矩的没规矩，在其内心早已萌芽。主要追求自己的目标需求。</p>\n<p>乔布斯15岁的在他父亲的帮助下他第一辆车，一辆双拼色的纳什大都会轿车，但他并不是很喜欢，但他不想让父亲知道。后面不到一年时间，他又自己攒钱可以换一辆带阿巴斯，发动机红色菲亚特850跑车。</p>\n<p>乔布斯高中的时候开始吸食大麻及各种迷幻药，他还因为这件事情跟他养父大吵了一架。他的性格使他喜欢沉溺与幻觉当中，他不喜欢感受那种被抛弃的感觉。</p>\n<p>“他经常一个人在角落里做自己的事情，压根不想跟我或者班上的其他人有任何交流。”麦科勒姆后来说。他从来没有放心地把储藏室的钥匙给过乔布斯。有一次乔布斯需要一样市面上找不到的零件，他就给制造商——底特律的伯勒斯公司（Burroughs）——打了一个对方付费电话，告诉他们自己正在设计一个新产品，想要测试一下那个部件。几天之后，这个部件通过航空包裹寄到了乔布斯手上。当麦科勒姆问他从哪儿弄来的时候，乔布斯带着一种旁若无人的骄傲讲述了事情的经过——他是怎样打对方付费电话并且编故事的。从上面的事情看出，主动真的很重要，很多资源其实只要主动并计划索取，很多人其实是愿意帮助你的，只是你要让其信任你，并觉得你很有意思</p>\n<h3 id=\"乔布斯和沃兹\"><a href=\"#乔布斯和沃兹\" class=\"headerlink\" title=\"乔布斯和沃兹\"></a>乔布斯和沃兹</h3><p>沃兹应该是乔布斯一生中很重要的一个伙伴，沃兹的父亲是典型的5号-思想型，在5号的知识理论熏陶下，导致沃兹也有点偏5号人格，但是我感觉沃兹不是纯5号，本应该是3号的感觉。沃兹八年级就会做计算器了，尽管在参赛者中还有十二年级的学生，但是沃兹的这台计算器还是赢得了最高奖。<br>沃兹也是一个喜欢搞恶作剧的人。对沃兹来说，被电击就好像是获得荣誉奖章一样。作为一名硬件工程师让他很自豪，但这也意味着触电是家常便饭。他曾经发明过一种轮盘赌游戏：四个人把拇指按在槽里，球落下之后，其中的一个会被电到。“搞硬件的人才愿意玩这个游戏，搞软件的都太胆小了。”他这么强调。<br>由于他喜欢搞电子产品，在同龄人在谈恋爱约会的时候，而他觉得这些都比设计电路更为复杂，他显得更加不合群了。高中四年级的时候，他做了一个电子节拍器——音乐教室里用来打拍子的、会发出“滴答”声的装置——然后他意识到“滴答”声听上去很像是炸弹定时器的声音。于是他把一些大块电池的标签撕掉，把它们绑在一起，然后放进了学校的储物柜里。他设定好装置，一旦柜门被打开，“滴答”频率就会变高。那天晚些时候，他被叫到了校长办公室。他还以为是因为他又一次获得了学校的最高数学奖。然而，等待他的是警察。</p>\n<p>高中四年级的时候，沃兹17岁就自己想着用最少的芯片制作一个台计算机。“我设计的计算机，使用的芯片数量只有市面上产品中芯片数量的一半，但我的设计还停留在图纸上。” 沃兹说。不过后面他在一个地下车库收集了芯片把这个计算机做出来了，命名为“奶油苏打水电脑”。在后面帮助他一起完成电脑制作的伙伴介绍他认识乔布斯，乔布斯和沃兹见面后，在比尔家门口的人行道坐了很久，两个人聊的很开心。从自己的恶作剧聊到电子学。“沃兹是我见过的第一个比我还懂电子学的人，”他从专业的角度这么说，“我立刻就喜欢上他了。我比自己的真实年龄要显得更成熟，而沃兹正相反，我们拉平了。沃兹非常聪明，但情商方面却像是我这个年龄的人。”</p>\n<p>一次有趣的电话通话音频波的泄露，让乔布斯和沃兹找到了免费打电话的机会，他们录制音频并制作出蓝色盒子，并且乔布斯还将蓝色盒子进行批量制作和销售。这位之后的他们的合作，也为之后的苹果公司奠定了基础。</p>\n<h3 id=\"出离\"><a href=\"#出离\" class=\"headerlink\" title=\"出离\"></a>出离</h3><p>乔布斯高中毕业，他父母本身准备让他读斯坦福大学，存的钱也就差不多够他读斯坦福大学。但是乔布斯高中毕业很是叛逆，跟布伦南搬到一座山上的房子同居，并且还服用迷幻药，一度跟父母争吵。但是在怎么争吵，在乔布斯的跑车高速起火时，来救援他的还是他的父亲。</p>\n<p>后面乔布斯答应去读大学，但是必须要要去里德学院，那是当时全美最贵的大学。<br>“去念斯坦福的人，他们已经知道自己想要什么了，”他说，“他们一点儿艺术性都没有。我想要上的是更富有艺术性的、更有趣的学校。” 可见乔布斯选择大学的时候就是那么的特别，什么都要追求个性，并追求完美，亢奋的4号人格就是会有追求完美的特征。</p>\n<p>乔布斯在去里德学院的时候一个人进的校门。他不想让父母跟着，同时后面乔布斯也感觉愧疚，因为选择这个学校给父母带来太大的经济压力，然后他当时并没有好好感谢父母，反而是不理他们。<br>乔布斯在学校里面认识了 科特基，一个跟乔布斯一样喜欢佛教禅宗。佛教对直觉的强调也深深影响了乔布斯。“我开始意识到，基于直觉的理解和意识，比抽象思维和逻辑分析更为重要。”<br>他们两个还经常一去读书馆的一个阁楼冥想，以及服用迷幻药。他们开始崇尚素食主义，支持菜叶和苹果跟水，所有乔布斯变得很瘦。</p>\n<p>一开始先是两天不吃东西，最终发展到一周甚至更长的时间，然后通过摄入大量的水和多叶蔬菜来结束绝食。“一周过后，你就会有很美妙的感觉了，”他说，“不用消化食物，可以让你获得很多活力。我当时状态很好，我觉得自己随时可以走路去旧金山。” 我认为有时候不吃东西确实，饿上一两天头脑会清晰喝多，而且走路变得轻快。所有很多东西，自己不亲身尝试，总是会持怀疑态度，只有自己亲身体验了，才知道原来是真的。</p>\n<p>乔布斯在里德学院还认识一个人，但是乔布斯最开始喜欢他身上的魅力，费里德兰比乔布斯大4岁，但是还在读本科，因为他之前因为携带价值125000美元的迷魂药被抓了拘留，后面回到学校进了学生会主席。他和乔布斯、科特基一样深深迷恋着东方精神。</p>\n<p>弗里德兰也觉得乔布斯十分有魅力。“他总是赤着脚走来走去，”他后来回忆说，“让我感到震撼的是他的激情。他只要对一样东西感兴趣，就会把这种兴趣发挥到非理性的极致状态。” 不过后面乔布斯并不喜欢费里德兰，就算乔布斯在他身上学到了不少东西，比如开朗，会推销等。“事情开始变得非常物质主义，”乔布斯回忆说，“每个人都了解到自己在为罗伯特的农场拼命工作，于是大家一个接一个地离开了。这一切让我觉得恶心。”</p>\n<p>“弗里德兰教给了史蒂夫现实扭曲力场，” 其实我一直不清楚现实扭曲力是什么，我暂且说一下我自己的理解，因为前不久看了国内评分较高的动漫《哪吒》，”若命运不公，我便与他斗到底” 把现在中很多人认为不可能的事情，把现在中不可能的事情扭曲成自己认为该有的样子。不被现实中的很多条框所限制。”我命由我，不由天！” 我也很多时候，其实并不甘安于现状。想改变，也许就是缺乏那种现实扭曲力场吧。</p>\n<p>在里德学院一年后，乔布斯选择退学，“我绝不会不去上必修课，这就是我们性格上的差异。” 其实他并不是真的想离开里德学院，他只是不想再付学费，也不想再去上那些提不起他兴趣的课程了。“我当时身处一个神奇的时代，”他后来回忆说，“提升我们觉悟的是禅宗，还有迷幻药。”即便是后来，他依然赞扬致幻剂让自己得到了更多启发：“使用迷幻药是一段意义非凡的经历，也是我一生中最重要的事情之一。迷幻药让你看到硬币的另一面，当药效退去之后你就记不清楚了，但你知道有这么一回事。它让我更清楚什么是重要的——创造伟大的发明，而不是赚钱。应该尽我所能，将此生放回历史和人类思想的长河。”</p>\n<h3 id=\"禅宗与游戏设计艺术\"><a href=\"#禅宗与游戏设计艺术\" class=\"headerlink\" title=\"禅宗与游戏设计艺术\"></a>禅宗与游戏设计艺术</h3><h3 id=\"乔布斯的恋爱\"><a href=\"#乔布斯的恋爱\" class=\"headerlink\" title=\"乔布斯的恋爱\"></a>乔布斯的恋爱</h3><p>乔布斯在23岁的时候抛弃了他的女儿，就像他父母当时抛弃他一样。<br>“他曾经被遗弃过，但后来他也遗弃了别人。”</p>\n<h3 id=\"待续…………\"><a href=\"#待续…………\" class=\"headerlink\" title=\"待续…………\"></a>待续…………</h3>","categories":["生活","阅读"],"tags":["Apple","Jobs","九型人格"]}]